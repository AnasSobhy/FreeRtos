
FreeRtos_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007004  08007004  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800700c  0800700c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001449c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014514  20014514  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001542a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030cd  00000000  00000000  000354d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  00039958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002447d  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159d2  00000000  00000000  0005eff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9335  00000000  00000000  000749c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dcfc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005894  00000000  00000000  0014dd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e38 	.word	0x08006e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006e38 	.word	0x08006e38

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f2c 	.word	0x20012f2c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb95 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f851 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8b9 	bl	80006ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <main+0x94>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1f      	ldr	r2, [pc, #124]	; (80005fc <main+0x94>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000586:	f004 f8c5 	bl	8004714 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800058a:	f005 f933 	bl	80057f4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(Task1_handler, "Task_1", 200, "Hello World From Task1", 2, &Task1_handle);
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <main+0x98>)
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4919      	ldr	r1, [pc, #100]	; (8000604 <main+0x9c>)
 800059e:	481a      	ldr	r0, [pc, #104]	; (8000608 <main+0xa0>)
 80005a0:	f002 f97a 	bl	8002898 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>
  status = xTaskCreate(Task2_handler, "Task_2", 200, "Hello World From Task2", 2, &Task2_handle);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <main+0xa4>)
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	4910      	ldr	r1, [pc, #64]	; (8000610 <main+0xa8>)
 80005d0:	4810      	ldr	r0, [pc, #64]	; (8000614 <main+0xac>)
 80005d2:	f002 f961 	bl	8002898 <xTaskCreate>
 80005d6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x8c>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	60fb      	str	r3, [r7, #12]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x8a>

  vTaskStartScheduler();
 80005f4:	f002 faea 	bl	8002bcc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x90>
 80005fa:	bf00      	nop
 80005fc:	e0001000 	.word	0xe0001000
 8000600:	08006e50 	.word	0x08006e50
 8000604:	08006e68 	.word	0x08006e68
 8000608:	080009a9 	.word	0x080009a9
 800060c:	08006e70 	.word	0x08006e70
 8000610:	08006e88 	.word	0x08006e88
 8000614:	080009b9 	.word	0x080009b9

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 ff04 	bl	8006434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800068c:	2332      	movs	r3, #50	; 0x32
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000690:	2304      	movs	r3, #4
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fdd7 	bl	8001250 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f9a0 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f838 	bl	8001740 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f989 	bl	80009ec <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4ba2      	ldr	r3, [pc, #648]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4aa1      	ldr	r2, [pc, #644]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b9f      	ldr	r3, [pc, #636]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b9b      	ldr	r3, [pc, #620]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a9a      	ldr	r2, [pc, #616]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b98      	ldr	r3, [pc, #608]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b94      	ldr	r3, [pc, #592]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a93      	ldr	r2, [pc, #588]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b91      	ldr	r3, [pc, #580]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b8d      	ldr	r3, [pc, #564]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a8c      	ldr	r2, [pc, #560]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b86      	ldr	r3, [pc, #536]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a85      	ldr	r2, [pc, #532]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b83      	ldr	r3, [pc, #524]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b7f      	ldr	r3, [pc, #508]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a7e      	ldr	r2, [pc, #504]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b7c      	ldr	r3, [pc, #496]	; (8000990 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	4879      	ldr	r0, [pc, #484]	; (8000994 <MX_GPIO_Init+0x2a8>)
 80007b0:	f000 fd34 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	4877      	ldr	r0, [pc, #476]	; (8000998 <MX_GPIO_Init+0x2ac>)
 80007ba:	f000 fd2f 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007be:	2200      	movs	r2, #0
 80007c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c4:	4875      	ldr	r0, [pc, #468]	; (800099c <MX_GPIO_Init+0x2b0>)
 80007c6:	f000 fd29 	bl	800121c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	486c      	ldr	r0, [pc, #432]	; (8000994 <MX_GPIO_Init+0x2a8>)
 80007e2:	f000 fb7f 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4866      	ldr	r0, [pc, #408]	; (8000998 <MX_GPIO_Init+0x2ac>)
 80007fe:	f000 fb71 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000812:	2305      	movs	r3, #5
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	485e      	ldr	r0, [pc, #376]	; (8000998 <MX_GPIO_Init+0x2ac>)
 800081e:	f000 fb61 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	485a      	ldr	r0, [pc, #360]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000838:	f000 fb54 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800083c:	2310      	movs	r3, #16
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800084c:	2306      	movs	r3, #6
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4852      	ldr	r0, [pc, #328]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000858:	f000 fb44 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800085c:	23e0      	movs	r3, #224	; 0xe0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086c:	2305      	movs	r3, #5
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	484a      	ldr	r0, [pc, #296]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000878:	f000 fb34 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4845      	ldr	r0, [pc, #276]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 8000890:	f000 fb28 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 80008b2:	f000 fb17 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4833      	ldr	r0, [pc, #204]	; (800099c <MX_GPIO_Init+0x2b0>)
 80008d0:	f000 fb08 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e6:	2306      	movs	r3, #6
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4829      	ldr	r0, [pc, #164]	; (8000998 <MX_GPIO_Init+0x2ac>)
 80008f2:	f000 faf7 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4825      	ldr	r0, [pc, #148]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800090c:	f000 faea 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000910:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000922:	230a      	movs	r3, #10
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800092e:	f000 fad9 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4815      	ldr	r0, [pc, #84]	; (800099c <MX_GPIO_Init+0x2b0>)
 8000946:	f000 facd 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800094a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 8000968:	f000 fabc 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x2a8>)
 8000982:	f000 faaf 	bl	8000ee4 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <Task1_handler>:

/* USER CODE BEGIN 4 */
void Task1_handler(void * pvParameters)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n",(char *)pvParameters);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f005 fdb5 	bl	8006520 <puts>
 80009b6:	e7fb      	b.n	80009b0 <Task1_handler+0x8>

080009b8 <Task2_handler>:
		//taskYIELD();
	}

}
void Task2_handler(void * pvParameters)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char *)pvParameters);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f005 fdad 	bl	8006520 <puts>
 80009c6:	e7fb      	b.n	80009c0 <Task2_handler+0x8>

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 f981 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40001000 	.word	0x40001000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a36:	f003 fab7 	bl	8003fa8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <HAL_InitTick+0xe4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <HAL_InitTick+0xe4>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <HAL_InitTick+0xe4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f86a 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d103      	bne.n	8000a96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a8e:	f001 f84f 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000a92:	6378      	str	r0, [r7, #52]	; 0x34
 8000a94:	e004      	b.n	8000aa0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a96:	f001 f84b 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa2:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <HAL_InitTick+0xe8>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	0c9b      	lsrs	r3, r3, #18
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <HAL_InitTick+0xec>)
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <HAL_InitTick+0xf0>)
 8000ab2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_InitTick+0xec>)
 8000ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HAL_InitTick+0xec>)
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_InitTick+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_InitTick+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_InitTick+0xec>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ad4:	4817      	ldr	r0, [pc, #92]	; (8000b34 <HAL_InitTick+0xec>)
 8000ad6:	f001 f871 	bl	8001bbc <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d11b      	bne.n	8000b20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <HAL_InitTick+0xec>)
 8000aea:	f001 f8c1 	bl	8001c70 <HAL_TIM_Base_Start_IT>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d111      	bne.n	8000b20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000afc:	2036      	movs	r0, #54	; 0x36
 8000afe:	f000 f9e3 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d808      	bhi.n	8000b1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2036      	movs	r0, #54	; 0x36
 8000b0e:	f000 f9bf 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_InitTick+0xf4>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	e002      	b.n	8000b20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3738      	adds	r7, #56	; 0x38
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	431bde83 	.word	0x431bde83
 8000b34:	20000094 	.word	0x20000094
 8000b38:	40001000 	.word	0x40001000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <TIM6_DAC_IRQHandler+0x10>)
 8000b72:	f001 f8ed 	bl	8001d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000094 	.word	0x20000094

08000b80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b92:	f3af 8000 	nop.w
 8000b96:	4601      	mov	r1, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <_read+0x12>
	}

return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be2:	605a      	str	r2, [r3, #4]
	return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_isatty>:

int _isatty(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd7 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f005 fb9b 	bl	80063b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fc75 	bl	8000568 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c8c:	08007014 	.word	0x08007014
  ldr r2, =_sbss
 8000c90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c94:	20014514 	.word	0x20014514

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8d8 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff febc 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe92 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	200000dc 	.word	0x200000dc

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200000dc 	.word	0x200000dc

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e16b      	b.n	80011d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 815a 	bne.w	80011d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80b4 	beq.w	80011d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <HAL_GPIO_Init+0x310>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x314>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d02b      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x318>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d025      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x31c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01f      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x320>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x21a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_GPIO_Init+0x324>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x216>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x328>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x212>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x20e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x20a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e00e      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010ee:	2308      	movs	r3, #8
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x228>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x310>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_GPIO_Init+0x334>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_GPIO_Init+0x334>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae90 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e267      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b85      	ldr	r3, [pc, #532]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b82      	ldr	r3, [pc, #520]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e242      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a75      	ldr	r2, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6f      	ldr	r2, [pc, #444]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6c      	ldr	r2, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcfe 	bl	8000d08 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcfa 	bl	8000d08 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e207      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fcea 	bl	8000d08 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fce6 	bl	8000d08 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f3      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c7      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4937      	ldr	r1, [pc, #220]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fc9f 	bl	8000d08 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fc9b 	bl	8000d08 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a8      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4925      	ldr	r1, [pc, #148]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc7e 	bl	8000d08 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc7a 	bl	8000d08 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e187      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d036      	beq.n	80014a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fc5e 	bl	8000d08 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fc5a 	bl	8000d08 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e167      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc47 	bl	8000d08 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e00e      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fc43 	bl	8000d08 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d907      	bls.n	800149c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e150      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ea      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8097 	beq.w	80015e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a7c      	ldr	r2, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b77      	ldr	r3, [pc, #476]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a73      	ldr	r2, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fc03 	bl	8000d08 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fbff 	bl	8000d08 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e10c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x2ea>
 800152c:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x30c>
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a5b      	ldr	r2, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fbc4 	bl	8000d08 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fbc0 	bl	8000d08 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0cb      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ee      	beq.n	8001584 <HAL_RCC_OscConfig+0x334>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fbae 	bl	8000d08 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fbaa 	bl	8000d08 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0b5      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ee      	bne.n	80015b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a1 	beq.w	8001730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d05c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d141      	bne.n	8001686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb7e 	bl	8000d08 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fb7a 	bl	8000d08 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e087      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb53 	bl	8000d08 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb4f 	bl	8000d08 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e05c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x416>
 8001684:	e054      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb3c 	bl	8000d08 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fb38 	bl	8000d08 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e045      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
 80016b2:	e03d      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e038      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d028      	beq.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d121      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fa6a 	bl	8000d08 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fa66 	bl	8000d08 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f8ae 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	08006f74 	.word	0x08006f74
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001910:	b094      	sub	sp, #80	; 0x50
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001924:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d00d      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001930:	2b08      	cmp	r3, #8
 8001932:	f200 80e1 	bhi.w	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 800193a:	2b04      	cmp	r3, #4
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x3a>
 800193e:	e0db      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001944:	e0db      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194a:	e0d8      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	2200      	movs	r2, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
 800196c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	0159      	lsls	r1, r3, #5
 800198c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001990:	0150      	lsls	r0, r2, #5
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4621      	mov	r1, r4
 8001998:	1a51      	subs	r1, r2, r1
 800199a:	6139      	str	r1, [r7, #16]
 800199c:	4629      	mov	r1, r5
 800199e:	eb63 0301 	sbc.w	r3, r3, r1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b0:	4659      	mov	r1, fp
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	4651      	mov	r1, sl
 80019b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ba:	4651      	mov	r1, sl
 80019bc:	018a      	lsls	r2, r1, #6
 80019be:	4651      	mov	r1, sl
 80019c0:	ebb2 0801 	subs.w	r8, r2, r1
 80019c4:	4659      	mov	r1, fp
 80019c6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019de:	4690      	mov	r8, r2
 80019e0:	4699      	mov	r9, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	eb18 0303 	adds.w	r3, r8, r3
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	462b      	mov	r3, r5
 80019ec:	eb49 0303 	adc.w	r3, r9, r3
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fe:	4629      	mov	r1, r5
 8001a00:	024b      	lsls	r3, r1, #9
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a08:	4621      	mov	r1, r4
 8001a0a:	024a      	lsls	r2, r1, #9
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a12:	2200      	movs	r2, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a1c:	f7fe fc22 	bl	8000264 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	e058      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	4611      	mov	r1, r2
 8001a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a44:	4642      	mov	r2, r8
 8001a46:	464b      	mov	r3, r9
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0159      	lsls	r1, r3, #5
 8001a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a56:	0150      	lsls	r0, r2, #5
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a62:	4649      	mov	r1, r9
 8001a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a80:	eb63 050b 	sbc.w	r5, r3, fp
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	028b      	lsls	r3, r1, #10
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001abc:	4621      	mov	r1, r4
 8001abe:	028a      	lsls	r2, r1, #10
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	f7fe fbc8 	bl	8000264 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08006f84 	.word	0x08006f84

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f839 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f9d8 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e04e      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d022      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d010      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40010400 	.word	0x40010400
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40001800 	.word	0x40001800

08001d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0202 	mvn.w	r2, #2
 8001d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8ee 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8e0 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8f1 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0204 	mvn.w	r2, #4
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8c4 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8b6 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8c7 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0208 	mvn.w	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f89a 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f88c 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f89d 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0210 	mvn.w	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f870 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f862 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f873 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0201 	mvn.w	r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fd7a 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b80      	cmp	r3, #128	; 0x80
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f902 	bl	8002104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f838 	bl	8001f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0220 	mvn.w	r2, #32
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8cc 	bl	80020f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <TIM_Base_SetConfig+0x118>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <TIM_Base_SetConfig+0x11c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <TIM_Base_SetConfig+0x120>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2f      	ldr	r2, [pc, #188]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d027      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <TIM_Base_SetConfig+0x118>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d023      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <TIM_Base_SetConfig+0x11c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <TIM_Base_SetConfig+0x120>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d017      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <TIM_Base_SetConfig+0x128>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <TIM_Base_SetConfig+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <TIM_Base_SetConfig+0x130>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <TIM_Base_SetConfig+0x134>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <TIM_Base_SetConfig+0x138>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a23      	ldr	r2, [pc, #140]	; (80020ec <TIM_Base_SetConfig+0x13c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <TIM_Base_SetConfig+0xf8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40010400 	.word	0x40010400
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800
 80020e4:	40001800 	.word	0x40001800
 80020e8:	40001c00 	.word	0x40001c00
 80020ec:	40002000 	.word	0x40002000

080020f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0208 	add.w	r2, r3, #8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0208 	add.w	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d103      	bne.n	8002192 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e00c      	b.n	80021ac <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3308      	adds	r3, #8
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e002      	b.n	80021a0 <vListInsert+0x2e>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d2f6      	bcs.n	800219a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6892      	ldr	r2, [r2, #8]
 80021fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6852      	ldr	r2, [r2, #4]
 8002204:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	d103      	bne.n	8002218 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1e5a      	subs	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002242:	2301      	movs	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <xQueueGenericReset+0x2e>
        __asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	60fb      	str	r3, [r7, #12]
    }
 8002262:	bf00      	nop
 8002264:	e7fe      	b.n	8002264 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05d      	beq.n	8002328 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d059      	beq.n	8002328 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	2100      	movs	r1, #0
 800227e:	fba3 2302 	umull	r2, r3, r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d000      	beq.n	8002288 <xQueueGenericReset+0x50>
 8002286:	2101      	movs	r1, #1
 8002288:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d14c      	bne.n	8002328 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800228e:	f001 ff09 	bl	80040a4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	441a      	add	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2200      	movs	r2, #0
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	3b01      	subs	r3, #1
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	441a      	add	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	22ff      	movs	r2, #255	; 0xff
 80022da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d114      	bne.n	800230e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01a      	beq.n	8002322 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	3310      	adds	r3, #16
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 ffed 	bl	80032d0 <xTaskRemoveFromEventList>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <xQueueGenericReset+0x11c>)
 80022fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	e009      	b.n	8002322 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3310      	adds	r3, #16
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff00 	bl	8002118 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	3324      	adds	r3, #36	; 0x24
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fefb 	bl	8002118 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002322:	f001 feef 	bl	8004104 <vPortExitCritical>
 8002326:	e001      	b.n	800232c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <xQueueGenericReset+0x110>
        __asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	60bb      	str	r3, [r7, #8]
    }
 8002344:	bf00      	nop
 8002346:	e7fe      	b.n	8002346 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002348:	697b      	ldr	r3, [r7, #20]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000ed04 	.word	0xe000ed04

08002358 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02e      	beq.n	80023ce <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002370:	2100      	movs	r1, #0
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	fba3 2302 	umull	r2, r3, r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d000      	beq.n	8002380 <xQueueGenericCreate+0x28>
 800237e:	2101      	movs	r1, #1
 8002380:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	d123      	bne.n	80023ce <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800238e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002392:	d81c      	bhi.n	80023ce <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3350      	adds	r3, #80	; 0x50
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 ffaa 	bl	80042fc <pvPortMalloc>
 80023a8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01c      	beq.n	80023ea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3350      	adds	r3, #80	; 0x50
 80023b8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f814 	bl	80023f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023cc:	e00d      	b.n	80023ea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <xQueueGenericCreate+0x92>
        __asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	613b      	str	r3, [r7, #16]
    }
 80023e6:	bf00      	nop
 80023e8:	e7fe      	b.n	80023e8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023ea:	69fb      	ldr	r3, [r7, #28]
    }
 80023ec:	4618      	mov	r0, r3
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e002      	b.n	8002416 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002422:	2101      	movs	r1, #1
 8002424:	69b8      	ldr	r0, [r7, #24]
 8002426:	f7ff ff07 	bl	8002238 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	68f9      	ldr	r1, [r7, #12]
 8002438:	2073      	movs	r0, #115	; 0x73
 800243a:	f003 f8d3 	bl	80055e4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b08f      	sub	sp, #60	; 0x3c
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <xQueueReceive+0x30>
        __asm volatile
 8002462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	623b      	str	r3, [r7, #32]
    }
 8002474:	bf00      	nop
 8002476:	e7fe      	b.n	8002476 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <xQueueReceive+0x3e>
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueReceive+0x42>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueReceive+0x44>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <xQueueReceive+0x5e>
        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	61fb      	str	r3, [r7, #28]
    }
 80024a2:	bf00      	nop
 80024a4:	e7fe      	b.n	80024a4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a6:	f001 f925 	bl	80036f4 <xTaskGetSchedulerState>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <xQueueReceive+0x6e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <xQueueReceive+0x72>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <xQueueReceive+0x74>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <xQueueReceive+0x8e>
        __asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	61bb      	str	r3, [r7, #24]
    }
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024d6:	f001 fde5 	bl	80040a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d02f      	beq.n	8002546 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ea:	f000 f8bd 	bl	8002668 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 fe03 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 80024f6:	4604      	mov	r4, r0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f003 fdff 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2101      	movs	r1, #1
 8002504:	9100      	str	r1, [sp, #0]
 8002506:	4621      	mov	r1, r4
 8002508:	205c      	movs	r0, #92	; 0x5c
 800250a:	f003 f8e1 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00f      	beq.n	800253e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	3310      	adds	r3, #16
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fed4 	bl	80032d0 <xTaskRemoveFromEventList>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800252e:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <xQueueReceive+0x21c>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800253e:	f001 fde1 	bl	8004104 <vPortExitCritical>
                return pdPASS;
 8002542:	2301      	movs	r3, #1
 8002544:	e08a      	b.n	800265c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d113      	bne.n	8002574 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800254c:	f001 fdda 	bl	8004104 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fdd2 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 8002558:	4604      	mov	r4, r0
 800255a:	2000      	movs	r0, #0
 800255c:	f003 fdce 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 8002560:	4602      	mov	r2, r0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2101      	movs	r1, #1
 8002566:	9100      	str	r1, [sp, #0]
 8002568:	4621      	mov	r1, r4
 800256a:	205c      	movs	r0, #92	; 0x5c
 800256c:	f003 f8b0 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002570:	2300      	movs	r3, #0
 8002572:	e073      	b.n	800265c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4618      	mov	r0, r3
 8002580:	f000 ff7e 	bl	8003480 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002588:	f001 fdbc 	bl	8004104 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800258c:	f000 fb80 	bl	8002c90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002590:	f001 fd88 	bl	80040a4 <vPortEnterCritical>
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800259a:	b25b      	sxtb	r3, r3
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d103      	bne.n	80025aa <xQueueReceive+0x162>
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d103      	bne.n	80025c0 <xQueueReceive+0x178>
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c0:	f001 fda0 	bl	8004104 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025c4:	1d3a      	adds	r2, r7, #4
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 ff6d 	bl	80034ac <xTaskCheckForTimeOut>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d124      	bne.n	8002622 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025da:	f000 f8bd 	bl	8002758 <prvIsQueueEmpty>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d018      	beq.n	8002616 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	3324      	adds	r3, #36	; 0x24
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fe03 	bl	80031f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f4:	f000 f85e 	bl	80026b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025f8:	f000 fb58 	bl	8002cac <xTaskResumeAll>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f47f af69 	bne.w	80024d6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <xQueueReceive+0x21c>)
 8002606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	e75f      	b.n	80024d6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002618:	f000 f84c 	bl	80026b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800261c:	f000 fb46 	bl	8002cac <xTaskResumeAll>
 8002620:	e759      	b.n	80024d6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002624:	f000 f846 	bl	80026b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002628:	f000 fb40 	bl	8002cac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800262c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800262e:	f000 f893 	bl	8002758 <prvIsQueueEmpty>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f43f af4e 	beq.w	80024d6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fd5d 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 8002642:	4604      	mov	r4, r0
 8002644:	2000      	movs	r0, #0
 8002646:	f003 fd59 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2101      	movs	r1, #1
 8002650:	9100      	str	r1, [sp, #0]
 8002652:	4621      	mov	r1, r4
 8002654:	205c      	movs	r0, #92	; 0x5c
 8002656:	f003 f83b 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800265a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800265c:	4618      	mov	r0, r3
 800265e:	3734      	adds	r7, #52	; 0x34
 8002660:	46bd      	mov	sp, r7
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d018      	beq.n	80026ac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	441a      	add	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	d303      	bcc.n	800269c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68d9      	ldr	r1, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	461a      	mov	r2, r3
 80026a6:	6838      	ldr	r0, [r7, #0]
 80026a8:	f003 feb6 	bl	8006418 <memcpy>
    }
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026bc:	f001 fcf2 	bl	80040a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026c8:	e011      	b.n	80026ee <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3324      	adds	r3, #36	; 0x24
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fdfa 	bl	80032d0 <xTaskRemoveFromEventList>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80026e2:	f000 ff49 	bl	8003578 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	dce9      	bgt.n	80026ca <prvUnlockQueue+0x16>
 80026f6:	e000      	b.n	80026fa <prvUnlockQueue+0x46>
                        break;
 80026f8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002702:	f001 fcff 	bl	8004104 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002706:	f001 fccd 	bl	80040a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002710:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002712:	e011      	b.n	8002738 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d012      	beq.n	8002742 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3310      	adds	r3, #16
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fdd5 	bl	80032d0 <xTaskRemoveFromEventList>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800272c:	f000 ff24 	bl	8003578 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	3b01      	subs	r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800273c:	2b00      	cmp	r3, #0
 800273e:	dce9      	bgt.n	8002714 <prvUnlockQueue+0x60>
 8002740:	e000      	b.n	8002744 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002742:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	22ff      	movs	r2, #255	; 0xff
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800274c:	f001 fcda 	bl	8004104 <vPortExitCritical>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002760:	f001 fca0 	bl	80040a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800276c:	2301      	movs	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e001      	b.n	8002776 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002776:	f001 fcc5 	bl	8004104 <vPortExitCritical>

    return xReturn;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <vQueueAddToRegistry+0x26>
        __asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	60fb      	str	r3, [r7, #12]
    }
 80027a6:	bf00      	nop
 80027a8:	e7fe      	b.n	80027a8 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d024      	beq.n	80027fe <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e01e      	b.n	80027f8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <vQueueAddToRegistry+0xa8>)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d105      	bne.n	80027d6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <vQueueAddToRegistry+0xa8>)
 80027d0:	4413      	add	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
                    break;
 80027d4:	e013      	b.n	80027fe <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <vQueueAddToRegistry+0x6e>
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <vQueueAddToRegistry+0xa8>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <vQueueAddToRegistry+0xa8>)
 80027ee:	4413      	add	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d9dd      	bls.n	80027ba <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00f      	beq.n	8002824 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fc72 	bl	80060fc <SEGGER_SYSVIEW_ShrinkId>
 8002818:	4601      	mov	r1, r0
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	2071      	movs	r0, #113	; 0x71
 8002820:	f002 fe86 	bl	8005530 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200000e0 	.word	0x200000e0

08002830 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002840:	f001 fc30 	bl	80040a4 <vPortEnterCritical>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800284a:	b25b      	sxtb	r3, r3
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d103      	bne.n	800285a <vQueueWaitForMessageRestricted+0x2a>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002860:	b25b      	sxtb	r3, r3
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d103      	bne.n	8002870 <vQueueWaitForMessageRestricted+0x40>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002870:	f001 fc48 	bl	8004104 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	2b00      	cmp	r3, #0
 800287a:	d106      	bne.n	800288a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fcdb 	bl	8003240 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff12 	bl	80026b4 <prvUnlockQueue>
    }
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af04      	add	r7, sp, #16
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 fd25 	bl	80042fc <pvPortMalloc>
 80028b2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00e      	beq.n	80028d8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028ba:	2058      	movs	r0, #88	; 0x58
 80028bc:	f001 fd1e 	bl	80042fc <pvPortMalloc>
 80028c0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
 80028ce:	e005      	b.n	80028dc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f001 fdf3 	bl	80044bc <vPortFree>
 80028d6:	e001      	b.n	80028dc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d013      	beq.n	800290a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9303      	str	r3, [sp, #12]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f80e 	bl	800291a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028fe:	69f8      	ldr	r0, [r7, #28]
 8002900:	f000 f8b0 	bl	8002a64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002904:	2301      	movs	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e002      	b.n	8002910 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002910:	69bb      	ldr	r3, [r7, #24]
    }
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b088      	sub	sp, #32
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	461a      	mov	r2, r3
 8002932:	21a5      	movs	r1, #165	; 0xa5
 8002934:	f003 fd7e 	bl	8006434 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002942:	3b01      	subs	r3, #1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f023 0307 	bic.w	r3, r3, #7
 8002950:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <prvInitialiseNewTask+0x58>
        __asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	617b      	str	r3, [r7, #20]
    }
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01f      	beq.n	80029b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	e012      	b.n	80029a4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	7819      	ldrb	r1, [r3, #0]
 8002986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	3334      	adds	r3, #52	; 0x34
 800298e:	460a      	mov	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b09      	cmp	r3, #9
 80029a8:	d9e9      	bls.n	800297e <prvInitialiseNewTask+0x64>
 80029aa:	e000      	b.n	80029ae <prvInitialiseNewTask+0x94>
            {
                break;
 80029ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029b6:	e003      	b.n	80029c0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d90a      	bls.n	80029dc <prvInitialiseNewTask+0xc2>
        __asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	613b      	str	r3, [r7, #16]
    }
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d901      	bls.n	80029e6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029e2:	2304      	movs	r3, #4
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2200      	movs	r2, #0
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	3304      	adds	r3, #4
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fbab 	bl	8002158 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	3318      	adds	r3, #24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fba6 	bl	8002158 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a10:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	f1c3 0205 	rsb	r2, r3, #5
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	3350      	adds	r3, #80	; 0x50
 8002a26:	2204      	movs	r2, #4
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fd02 	bl	8006434 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	3354      	adds	r3, #84	; 0x54
 8002a34:	2201      	movs	r2, #1
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fcfb 	bl	8006434 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	69b8      	ldr	r0, [r7, #24]
 8002a44:	f001 f984 	bl	8003d50 <pxPortInitialiseStack>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a58:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a6c:	f001 fb1a 	bl	80040a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <prvAddNewTaskToReadyList+0x14c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <prvAddNewTaskToReadyList+0x14c>)
 8002a78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <prvAddNewTaskToReadyList+0x150>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a82:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <prvAddNewTaskToReadyList+0x150>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <prvAddNewTaskToReadyList+0x14c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d110      	bne.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a90:	f000 fd96 	bl	80035c0 <prvInitialiseTaskLists>
 8002a94:	e00d      	b.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a96:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <prvAddNewTaskToReadyList+0x154>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <prvAddNewTaskToReadyList+0x150>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d802      	bhi.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002aac:	4a41      	ldr	r2, [pc, #260]	; (8002bb4 <prvAddNewTaskToReadyList+0x150>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <prvAddNewTaskToReadyList+0x158>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <prvAddNewTaskToReadyList+0x158>)
 8002aba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <prvAddNewTaskToReadyList+0x158>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <prvAddNewTaskToReadyList+0x94>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 f9ef 	bl	8005eb0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461c      	mov	r4, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	1ae3      	subs	r3, r4, r3
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	462b      	mov	r3, r5
 8002af4:	f001 feb0 	bl	8004858 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fa5c 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <prvAddNewTaskToReadyList+0x15c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	; (8002bc0 <prvAddNewTaskToReadyList+0x15c>)
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b16:	492b      	ldr	r1, [pc, #172]	; (8002bc4 <prvAddNewTaskToReadyList+0x160>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3304      	adds	r3, #4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	3204      	adds	r2, #4
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <prvAddNewTaskToReadyList+0x160>)
 8002b56:	441a      	add	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	4918      	ldr	r1, [pc, #96]	; (8002bc4 <prvAddNewTaskToReadyList+0x160>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1c59      	adds	r1, r3, #1
 8002b70:	4814      	ldr	r0, [pc, #80]	; (8002bc4 <prvAddNewTaskToReadyList+0x160>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4403      	add	r3, r0
 8002b7c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b7e:	f001 fac1 	bl	8004104 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <prvAddNewTaskToReadyList+0x154>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00e      	beq.n	8002ba8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <prvAddNewTaskToReadyList+0x150>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <prvAddNewTaskToReadyList+0x164>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb0:	200001f8 	.word	0x200001f8
 8002bb4:	20000120 	.word	0x20000120
 8002bb8:	20000204 	.word	0x20000204
 8002bbc:	20000214 	.word	0x20000214
 8002bc0:	20000200 	.word	0x20000200
 8002bc4:	20000124 	.word	0x20000124
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <vTaskStartScheduler+0xa4>)
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2282      	movs	r2, #130	; 0x82
 8002bde:	4925      	ldr	r1, [pc, #148]	; (8002c74 <vTaskStartScheduler+0xa8>)
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <vTaskStartScheduler+0xac>)
 8002be2:	f7ff fe59 	bl	8002898 <xTaskCreate>
 8002be6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002bee:	f000 fe2b 	bl	8003848 <xTimerCreateTimerTask>
 8002bf2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d124      	bne.n	8002c44 <vTaskStartScheduler+0x78>
        __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	60bb      	str	r3, [r7, #8]
    }
 8002c0c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <vTaskStartScheduler+0xb0>)
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <vTaskStartScheduler+0xb4>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <vTaskStartScheduler+0xb8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <vTaskStartScheduler+0xbc>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <vTaskStartScheduler+0xa4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d102      	bne.n	8002c34 <vTaskStartScheduler+0x68>
 8002c2e:	f003 f923 	bl	8005e78 <SEGGER_SYSVIEW_OnIdle>
 8002c32:	e004      	b.n	8002c3e <vTaskStartScheduler+0x72>
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <vTaskStartScheduler+0xbc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f97b 	bl	8005f34 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002c3e:	f001 f911 	bl	8003e64 <xPortStartScheduler>
 8002c42:	e00e      	b.n	8002c62 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d10a      	bne.n	8002c62 <vTaskStartScheduler+0x96>
        __asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	607b      	str	r3, [r7, #4]
    }
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <vTaskStartScheduler+0xc0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000021c 	.word	0x2000021c
 8002c74:	08006e90 	.word	0x08006e90
 8002c78:	08003591 	.word	0x08003591
 8002c7c:	20000218 	.word	0x20000218
 8002c80:	20000204 	.word	0x20000204
 8002c84:	200001fc 	.word	0x200001fc
 8002c88:	20000120 	.word	0x20000120
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <vTaskSuspendAll+0x18>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <vTaskSuspendAll+0x18>)
 8002c9c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	20000220 	.word	0x20000220

08002cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002cba:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <xTaskResumeAll+0x1dc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	607b      	str	r3, [r7, #4]
    }
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cd8:	f001 f9e4 	bl	80040a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <xTaskResumeAll+0x1dc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <xTaskResumeAll+0x1dc>)
 8002ce4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce6:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <xTaskResumeAll+0x1dc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 80c4 	bne.w	8002e78 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <xTaskResumeAll+0x1e0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80bf 	beq.w	8002e78 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cfa:	e08e      	b.n	8002e1a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <xTaskResumeAll+0x1e4>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	6a12      	ldr	r2, [r2, #32]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	69d2      	ldr	r2, [r2, #28]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3318      	adds	r3, #24
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d103      	bne.n	8002d32 <xTaskResumeAll+0x86>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2200      	movs	r2, #0
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1e5a      	subs	r2, r3, #1
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	68d2      	ldr	r2, [r2, #12]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3304      	adds	r3, #4
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d103      	bne.n	8002d70 <xTaskResumeAll+0xc4>
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 f918 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <xTaskResumeAll+0x1e8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	4a3f      	ldr	r2, [pc, #252]	; (8002e94 <xTaskResumeAll+0x1e8>)
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	493e      	ldr	r1, [pc, #248]	; (8002e98 <xTaskResumeAll+0x1ec>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3304      	adds	r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	3204      	adds	r2, #4
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4a2e      	ldr	r2, [pc, #184]	; (8002e98 <xTaskResumeAll+0x1ec>)
 8002dde:	441a      	add	r2, r3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	615a      	str	r2, [r3, #20]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	492b      	ldr	r1, [pc, #172]	; (8002e98 <xTaskResumeAll+0x1ec>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	4827      	ldr	r0, [pc, #156]	; (8002e98 <xTaskResumeAll+0x1ec>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4403      	add	r3, r0
 8002e04:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <xTaskResumeAll+0x1f0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <xTaskResumeAll+0x1f4>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <xTaskResumeAll+0x1e4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f af6c 	bne.w	8002cfc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e2a:	f000 fc47 	bl	80036bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <xTaskResumeAll+0x1f8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e3a:	f000 f859 	bl	8002ef0 <xTaskIncrementTick>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <xTaskResumeAll+0x1f4>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f1      	bne.n	8002e3a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <xTaskResumeAll+0x1f8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <xTaskResumeAll+0x1f4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d009      	beq.n	8002e78 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <xTaskResumeAll+0x1fc>)
 8002e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e78:	f001 f944 	bl	8004104 <vPortExitCritical>

    return xAlreadyYielded;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000220 	.word	0x20000220
 8002e8c:	200001f8 	.word	0x200001f8
 8002e90:	200001b8 	.word	0x200001b8
 8002e94:	20000200 	.word	0x20000200
 8002e98:	20000124 	.word	0x20000124
 8002e9c:	20000120 	.word	0x20000120
 8002ea0:	2000020c 	.word	0x2000020c
 8002ea4:	20000208 	.word	0x20000208
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <xTaskGetTickCount+0x1c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002eb8:	687b      	ldr	r3, [r7, #4]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200001fc 	.word	0x200001fc

08002ecc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed2:	f001 f9d3 	bl	800427c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <xTaskGetTickCountFromISR+0x20>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ee0:	683b      	ldr	r3, [r7, #0]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200001fc 	.word	0x200001fc

08002ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002efa:	4b7f      	ldr	r3, [pc, #508]	; (80030f8 <xTaskIncrementTick+0x208>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 80f0 	bne.w	80030e4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f04:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <xTaskIncrementTick+0x20c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f0c:	4a7b      	ldr	r2, [pc, #492]	; (80030fc <xTaskIncrementTick+0x20c>)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d120      	bne.n	8002f5a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f18:	4b79      	ldr	r3, [pc, #484]	; (8003100 <xTaskIncrementTick+0x210>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <xTaskIncrementTick+0x48>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	607b      	str	r3, [r7, #4]
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <xTaskIncrementTick+0x46>
 8002f38:	4b71      	ldr	r3, [pc, #452]	; (8003100 <xTaskIncrementTick+0x210>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	4b71      	ldr	r3, [pc, #452]	; (8003104 <xTaskIncrementTick+0x214>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6f      	ldr	r2, [pc, #444]	; (8003100 <xTaskIncrementTick+0x210>)
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4a6f      	ldr	r2, [pc, #444]	; (8003104 <xTaskIncrementTick+0x214>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b6e      	ldr	r3, [pc, #440]	; (8003108 <xTaskIncrementTick+0x218>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <xTaskIncrementTick+0x218>)
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	f000 fbb1 	bl	80036bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f5a:	4b6c      	ldr	r3, [pc, #432]	; (800310c <xTaskIncrementTick+0x21c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f0c0 80aa 	bcc.w	80030ba <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <xTaskIncrementTick+0x210>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f70:	4b66      	ldr	r3, [pc, #408]	; (800310c <xTaskIncrementTick+0x21c>)
 8002f72:	f04f 32ff 	mov.w	r2, #4294967295
 8002f76:	601a      	str	r2, [r3, #0]
                    break;
 8002f78:	e09f      	b.n	80030ba <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f7a:	4b61      	ldr	r3, [pc, #388]	; (8003100 <xTaskIncrementTick+0x210>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d203      	bcs.n	8002f9a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <xTaskIncrementTick+0x21c>)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f98:	e08f      	b.n	80030ba <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d103      	bne.n	8002fc8 <xTaskIncrementTick+0xd8>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	615a      	str	r2, [r3, #20]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01e      	beq.n	800301e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	6a12      	ldr	r2, [r2, #32]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	69d2      	ldr	r2, [r2, #28]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3318      	adds	r3, #24
 8003002:	429a      	cmp	r2, r3
 8003004:	d103      	bne.n	800300e <xTaskIncrementTick+0x11e>
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2200      	movs	r2, #0
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4618      	mov	r0, r3
 8003022:	f002 ffc9 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	2201      	movs	r2, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <xTaskIncrementTick+0x220>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	4a36      	ldr	r2, [pc, #216]	; (8003110 <xTaskIncrementTick+0x220>)
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4935      	ldr	r1, [pc, #212]	; (8003114 <xTaskIncrementTick+0x224>)
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3304      	adds	r3, #4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	3204      	adds	r2, #4
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1d1a      	adds	r2, r3, #4
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <xTaskIncrementTick+0x224>)
 800307c:	441a      	add	r2, r3
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	615a      	str	r2, [r3, #20]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	4923      	ldr	r1, [pc, #140]	; (8003114 <xTaskIncrementTick+0x224>)
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1c59      	adds	r1, r3, #1
 8003096:	481f      	ldr	r0, [pc, #124]	; (8003114 <xTaskIncrementTick+0x224>)
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4403      	add	r3, r0
 80030a2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <xTaskIncrementTick+0x228>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	429a      	cmp	r2, r3
 80030b0:	f4ff af59 	bcc.w	8002f66 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b8:	e755      	b.n	8002f66 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <xTaskIncrementTick+0x228>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4914      	ldr	r1, [pc, #80]	; (8003114 <xTaskIncrementTick+0x224>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d901      	bls.n	80030d6 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80030d2:	2301      	movs	r3, #1
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <xTaskIncrementTick+0x22c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80030de:	2301      	movs	r3, #1
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e004      	b.n	80030ee <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <xTaskIncrementTick+0x230>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <xTaskIncrementTick+0x230>)
 80030ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000220 	.word	0x20000220
 80030fc:	200001fc 	.word	0x200001fc
 8003100:	200001b0 	.word	0x200001b0
 8003104:	200001b4 	.word	0x200001b4
 8003108:	20000210 	.word	0x20000210
 800310c:	20000218 	.word	0x20000218
 8003110:	20000200 	.word	0x20000200
 8003114:	20000124 	.word	0x20000124
 8003118:	20000120 	.word	0x20000120
 800311c:	2000020c 	.word	0x2000020c
 8003120:	20000208 	.word	0x20000208

08003124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <vTaskSwitchContext+0xbc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003132:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <vTaskSwitchContext+0xc0>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003138:	e04d      	b.n	80031d6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <vTaskSwitchContext+0xc0>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003140:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <vTaskSwitchContext+0xc4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800314e:	7afb      	ldrb	r3, [r7, #11]
 8003150:	f1c3 031f 	rsb	r3, r3, #31
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <vTaskSwitchContext+0xc8>)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <vTaskSwitchContext+0x5c>
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	607b      	str	r3, [r7, #4]
    }
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <vTaskSwitchContext+0x5a>
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <vTaskSwitchContext+0xc8>)
 800318c:	4413      	add	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3308      	adds	r3, #8
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d104      	bne.n	80031b0 <vTaskSwitchContext+0x8c>
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <vTaskSwitchContext+0xcc>)
 80031b8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <vTaskSwitchContext+0xcc>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <vTaskSwitchContext+0xd0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d102      	bne.n	80031cc <vTaskSwitchContext+0xa8>
 80031c6:	f002 fe57 	bl	8005e78 <SEGGER_SYSVIEW_OnIdle>
}
 80031ca:	e004      	b.n	80031d6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <vTaskSwitchContext+0xcc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 feaf 	bl	8005f34 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000220 	.word	0x20000220
 80031e4:	2000020c 	.word	0x2000020c
 80031e8:	20000200 	.word	0x20000200
 80031ec:	20000124 	.word	0x20000124
 80031f0:	20000120 	.word	0x20000120
 80031f4:	2000021c 	.word	0x2000021c

080031f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	60fb      	str	r3, [r7, #12]
    }
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <vTaskPlaceOnEventList+0x44>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3318      	adds	r3, #24
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe ffa3 	bl	8002172 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800322c:	2101      	movs	r1, #1
 800322e:	6838      	ldr	r0, [r7, #0]
 8003230:	f000 fa7e 	bl	8003730 <prvAddCurrentTaskToDelayedList>
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000120 	.word	0x20000120

08003240 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	613b      	str	r3, [r7, #16]
    }
 8003264:	bf00      	nop
 8003266:	e7fe      	b.n	8003266 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	61da      	str	r2, [r3, #28]
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	6892      	ldr	r2, [r2, #8]
 800327e:	621a      	str	r2, [r3, #32]
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	3218      	adds	r2, #24
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <vTaskPlaceOnEventListRestricted+0x8c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f103 0218 	add.w	r2, r3, #24
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <vTaskPlaceOnEventListRestricted+0x8c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80032b6:	2024      	movs	r0, #36	; 0x24
 80032b8:	f002 f8e0 	bl	800547c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68b8      	ldr	r0, [r7, #8]
 80032c0:	f000 fa36 	bl	8003730 <prvAddCurrentTaskToDelayedList>
    }
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000120 	.word	0x20000120

080032d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	60fb      	str	r3, [r7, #12]
    }
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	6a12      	ldr	r2, [r2, #32]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	69d2      	ldr	r2, [r2, #28]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	3318      	adds	r3, #24
 800331e:	429a      	cmp	r2, r3
 8003320:	d103      	bne.n	800332a <xTaskRemoveFromEventList+0x5a>
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	2200      	movs	r2, #0
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333a:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <xTaskRemoveFromEventList+0x198>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d162      	bne.n	8003408 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	68d2      	ldr	r2, [r2, #12]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	3304      	adds	r3, #4
 8003364:	429a      	cmp	r2, r3
 8003366:	d103      	bne.n	8003370 <xTaskRemoveFromEventList+0xa0>
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	4618      	mov	r0, r3
 8003384:	f002 fe18 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2201      	movs	r2, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <xTaskRemoveFromEventList+0x19c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	4a35      	ldr	r2, [pc, #212]	; (800346c <xTaskRemoveFromEventList+0x19c>)
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339e:	4934      	ldr	r1, [pc, #208]	; (8003470 <xTaskRemoveFromEventList+0x1a0>)
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3304      	adds	r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	6a3a      	ldr	r2, [r7, #32]
 80033c4:	3204      	adds	r2, #4
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	1d1a      	adds	r2, r3, #4
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4a24      	ldr	r2, [pc, #144]	; (8003470 <xTaskRemoveFromEventList+0x1a0>)
 80033de:	441a      	add	r2, r3
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	615a      	str	r2, [r3, #20]
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	4921      	ldr	r1, [pc, #132]	; (8003470 <xTaskRemoveFromEventList+0x1a0>)
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	481d      	ldr	r0, [pc, #116]	; (8003470 <xTaskRemoveFromEventList+0x1a0>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4403      	add	r3, r0
 8003404:	6019      	str	r1, [r3, #0]
 8003406:	e01b      	b.n	8003440 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <xTaskRemoveFromEventList+0x1a4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	61da      	str	r2, [r3, #28]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	3218      	adds	r2, #24
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f103 0218 	add.w	r2, r3, #24
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <xTaskRemoveFromEventList+0x1a4>)
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <xTaskRemoveFromEventList+0x1a4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <xTaskRemoveFromEventList+0x1a4>)
 800343e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <xTaskRemoveFromEventList+0x1a8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d905      	bls.n	800345a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800344e:	2301      	movs	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <xTaskRemoveFromEventList+0x1ac>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e001      	b.n	800345e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003460:	4618      	mov	r0, r3
 8003462:	3728      	adds	r7, #40	; 0x28
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000220 	.word	0x20000220
 800346c:	20000200 	.word	0x20000200
 8003470:	20000124 	.word	0x20000124
 8003474:	200001b8 	.word	0x200001b8
 8003478:	20000120 	.word	0x20000120
 800347c:	2000020c 	.word	0x2000020c

08003480 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <vTaskInternalSetTimeOutState+0x24>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <vTaskInternalSetTimeOutState+0x28>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	605a      	str	r2, [r3, #4]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	20000210 	.word	0x20000210
 80034a8:	200001fc 	.word	0x200001fc

080034ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	613b      	str	r3, [r7, #16]
    }
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	60fb      	str	r3, [r7, #12]
    }
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80034ee:	f000 fdd9 	bl	80040a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <xTaskCheckForTimeOut+0xc4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d102      	bne.n	8003512 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	e026      	b.n	8003560 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b17      	ldr	r3, [pc, #92]	; (8003574 <xTaskCheckForTimeOut+0xc8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d00a      	beq.n	8003534 <xTaskCheckForTimeOut+0x88>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	429a      	cmp	r2, r3
 8003526:	d305      	bcc.n	8003534 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003528:	2301      	movs	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e015      	b.n	8003560 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	429a      	cmp	r2, r3
 800353c:	d20b      	bcs.n	8003556 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad2      	subs	r2, r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff98 	bl	8003480 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e004      	b.n	8003560 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800355c:	2301      	movs	r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003560:	f000 fdd0 	bl	8004104 <vPortExitCritical>

    return xReturn;
 8003564:	69fb      	ldr	r3, [r7, #28]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200001fc 	.word	0x200001fc
 8003574:	20000210 	.word	0x20000210

08003578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <vTaskMissedYield+0x14>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	2000020c 	.word	0x2000020c

08003590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003598:	f000 f852 	bl	8003640 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <prvIdleTask+0x28>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d9f9      	bls.n	8003598 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <prvIdleTask+0x2c>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80035b4:	e7f0      	b.n	8003598 <prvIdleTask+0x8>
 80035b6:	bf00      	nop
 80035b8:	20000124 	.word	0x20000124
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	e00c      	b.n	80035e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <prvInitialiseTaskLists+0x60>)
 80035d8:	4413      	add	r3, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fd9c 	bl	8002118 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d9ef      	bls.n	80035cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035ec:	480d      	ldr	r0, [pc, #52]	; (8003624 <prvInitialiseTaskLists+0x64>)
 80035ee:	f7fe fd93 	bl	8002118 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <prvInitialiseTaskLists+0x68>)
 80035f4:	f7fe fd90 	bl	8002118 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035f8:	480c      	ldr	r0, [pc, #48]	; (800362c <prvInitialiseTaskLists+0x6c>)
 80035fa:	f7fe fd8d 	bl	8002118 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80035fe:	480c      	ldr	r0, [pc, #48]	; (8003630 <prvInitialiseTaskLists+0x70>)
 8003600:	f7fe fd8a 	bl	8002118 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003604:	480b      	ldr	r0, [pc, #44]	; (8003634 <prvInitialiseTaskLists+0x74>)
 8003606:	f7fe fd87 	bl	8002118 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <prvInitialiseTaskLists+0x78>)
 800360c:	4a05      	ldr	r2, [pc, #20]	; (8003624 <prvInitialiseTaskLists+0x64>)
 800360e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <prvInitialiseTaskLists+0x7c>)
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <prvInitialiseTaskLists+0x68>)
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000124 	.word	0x20000124
 8003624:	20000188 	.word	0x20000188
 8003628:	2000019c 	.word	0x2000019c
 800362c:	200001b8 	.word	0x200001b8
 8003630:	200001cc 	.word	0x200001cc
 8003634:	200001e4 	.word	0x200001e4
 8003638:	200001b0 	.word	0x200001b0
 800363c:	200001b4 	.word	0x200001b4

08003640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003646:	e019      	b.n	800367c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003648:	f000 fd2c 	bl	80040a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <prvCheckTasksWaitingTermination+0x50>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fdc3 	bl	80021e4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <prvCheckTasksWaitingTermination+0x54>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <prvCheckTasksWaitingTermination+0x54>)
 8003666:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <prvCheckTasksWaitingTermination+0x58>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <prvCheckTasksWaitingTermination+0x58>)
 8003670:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003672:	f000 fd47 	bl	8004104 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f810 	bl	800369c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <prvCheckTasksWaitingTermination+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e1      	bne.n	8003648 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200001cc 	.word	0x200001cc
 8003694:	200001f8 	.word	0x200001f8
 8003698:	200001e0 	.word	0x200001e0

0800369c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 ff07 	bl	80044bc <vPortFree>
                vPortFree( pxTCB );
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 ff04 	bl	80044bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <prvResetNextTaskUnblockTime+0x30>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <prvResetNextTaskUnblockTime+0x34>)
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036d2:	e005      	b.n	80036e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <prvResetNextTaskUnblockTime+0x30>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <prvResetNextTaskUnblockTime+0x34>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	200001b0 	.word	0x200001b0
 80036f0:	20000218 	.word	0x20000218

080036f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <xTaskGetSchedulerState+0x34>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003702:	2301      	movs	r3, #1
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	e008      	b.n	800371a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <xTaskGetSchedulerState+0x38>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003710:	2302      	movs	r3, #2
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	e001      	b.n	800371a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800371a:	687b      	ldr	r3, [r7, #4]
    }
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000204 	.word	0x20000204
 800372c:	20000220 	.word	0x20000220

08003730 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800373a:	4b3c      	ldr	r3, [pc, #240]	; (800382c <prvAddCurrentTaskToDelayedList+0xfc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003740:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fd4c 	bl	80021e4 <uxListRemove>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2201      	movs	r2, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <prvAddCurrentTaskToDelayedList+0x104>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4013      	ands	r3, r2
 8003766:	4a33      	ldr	r2, [pc, #204]	; (8003834 <prvAddCurrentTaskToDelayedList+0x104>)
 8003768:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d124      	bne.n	80037bc <prvAddCurrentTaskToDelayedList+0x8c>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d021      	beq.n	80037bc <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <prvAddCurrentTaskToDelayedList+0x108>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	60da      	str	r2, [r3, #12]
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	3204      	adds	r2, #4
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a23      	ldr	r2, [pc, #140]	; (8003838 <prvAddCurrentTaskToDelayedList+0x108>)
 80037ac:	615a      	str	r2, [r3, #20]
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <prvAddCurrentTaskToDelayedList+0x108>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a20      	ldr	r2, [pc, #128]	; (8003838 <prvAddCurrentTaskToDelayedList+0x108>)
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037ba:	e032      	b.n	8003822 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d20f      	bcs.n	80037f4 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2104      	movs	r1, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f002 fc2e 	bl	800603c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fe fcc0 	bl	8002172 <vListInsert>
}
 80037f2:	e016      	b.n	8003822 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2104      	movs	r1, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f002 fc1e 	bl	800603c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <prvAddCurrentTaskToDelayedList+0x110>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7fe fcb0 	bl	8002172 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <prvAddCurrentTaskToDelayedList+0x114>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	429a      	cmp	r2, r3
 800381a:	d202      	bcs.n	8003822 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <prvAddCurrentTaskToDelayedList+0x114>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6013      	str	r3, [r2, #0]
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200001fc 	.word	0x200001fc
 8003830:	20000120 	.word	0x20000120
 8003834:	20000200 	.word	0x20000200
 8003838:	200001e4 	.word	0x200001e4
 800383c:	200001b4 	.word	0x200001b4
 8003840:	200001b0 	.word	0x200001b0
 8003844:	20000218 	.word	0x20000218

08003848 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003852:	f000 fa47 	bl	8003ce4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <xTimerCreateTimerTask+0x54>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <xTimerCreateTimerTask+0x58>)
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2302      	movs	r3, #2
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800386c:	490d      	ldr	r1, [pc, #52]	; (80038a4 <xTimerCreateTimerTask+0x5c>)
 800386e:	480e      	ldr	r0, [pc, #56]	; (80038a8 <xTimerCreateTimerTask+0x60>)
 8003870:	f7ff f812 	bl	8002898 <xTaskCreate>
 8003874:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	603b      	str	r3, [r7, #0]
    }
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003892:	687b      	ldr	r3, [r7, #4]
    }
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000254 	.word	0x20000254
 80038a0:	20000258 	.word	0x20000258
 80038a4:	08006e98 	.word	0x08006e98
 80038a8:	08003951 	.word	0x08003951

080038ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038b8:	e008      	b.n	80038cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	18d1      	adds	r1, r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f8dd 	bl	8003a98 <prvInsertTimerInActiveList>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ea      	bne.n	80038ba <prvReloadTimer+0xe>
        }
    }
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <prvProcessExpiredTimer+0x5c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3304      	adds	r3, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fc6b 	bl	80021e4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff ffc3 	bl	80038ac <prvReloadTimer>
 8003926:	e008      	b.n	800393a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	4798      	blx	r3
    }
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000024c 	.word	0x2000024c

08003950 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f857 	bl	8003a10 <prvGetNextExpireTime>
 8003962:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f803 	bl	8003974 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800396e:	f000 f8d5 	bl	8003b1c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003972:	e7f1      	b.n	8003958 <prvTimerTask+0x8>

08003974 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800397e:	f7ff f987 	bl	8002c90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003982:	f107 0308 	add.w	r3, r7, #8
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f866 	bl	8003a58 <prvSampleTimeNow>
 800398c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d130      	bne.n	80039f6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <prvProcessTimerOrBlockTask+0x3c>
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d806      	bhi.n	80039b0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039a2:	f7ff f983 	bl	8002cac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ffa1 	bl	80038f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039ae:	e024      	b.n	80039fa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <prvProcessTimerOrBlockTask+0x90>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <prvProcessTimerOrBlockTask+0x50>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <prvProcessTimerOrBlockTask+0x52>
 80039c4:	2300      	movs	r3, #0
 80039c6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <prvProcessTimerOrBlockTask+0x94>)
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fe ff2b 	bl	8002830 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80039da:	f7ff f967 	bl	8002cac <xTaskResumeAll>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <prvProcessTimerOrBlockTask+0x98>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
    }
 80039f4:	e001      	b.n	80039fa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80039f6:	f7ff f959 	bl	8002cac <xTaskResumeAll>
    }
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000250 	.word	0x20000250
 8003a08:	20000254 	.word	0x20000254
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <prvGetNextExpireTime+0x44>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <prvGetNextExpireTime+0x16>
 8003a22:	2201      	movs	r2, #1
 8003a24:	e000      	b.n	8003a28 <prvGetNextExpireTime+0x18>
 8003a26:	2200      	movs	r2, #0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvGetNextExpireTime+0x44>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e001      	b.n	8003a44 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a44:	68fb      	ldr	r3, [r7, #12]
    }
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	2000024c 	.word	0x2000024c

08003a58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a60:	f7ff fa24 	bl	8002eac <xTaskGetTickCount>
 8003a64:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <prvSampleTimeNow+0x3c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d205      	bcs.n	8003a7c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a70:	f000 f912 	bl	8003c98 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e002      	b.n	8003a82 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <prvSampleTimeNow+0x3c>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a88:	68fb      	ldr	r3, [r7, #12]
    }
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000025c 	.word	0x2000025c

08003a98 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d812      	bhi.n	8003ae4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e01b      	b.n	8003b0a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <prvInsertTimerInActiveList+0x7c>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f7fe fb48 	bl	8002172 <vListInsert>
 8003ae2:	e012      	b.n	8003b0a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d206      	bcs.n	8003afa <prvInsertTimerInActiveList+0x62>
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e007      	b.n	8003b0a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <prvInsertTimerInActiveList+0x80>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fe fb34 	bl	8002172 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b0a:	697b      	ldr	r3, [r7, #20]
    }
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000250 	.word	0x20000250
 8003b18:	2000024c 	.word	0x2000024c

08003b1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b22:	e0a6      	b.n	8003c72 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f2c0 80a2 	blt.w	8003c70 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fb51 	bl	80021e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff87 	bl	8003a58 <prvSampleTimeNow>
 8003b4a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	f200 808e 	bhi.w	8003c72 <prvProcessReceivedCommands+0x156>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <prvProcessReceivedCommands+0x40>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b81 	.word	0x08003b81
 8003b64:	08003be9 	.word	0x08003be9
 8003b68:	08003bfd 	.word	0x08003bfd
 8003b6c:	08003c47 	.word	0x08003c47
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b81 	.word	0x08003b81
 8003b78:	08003be9 	.word	0x08003be9
 8003b7c:	08003bfd 	.word	0x08003bfd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	18d1      	adds	r1, r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	69f8      	ldr	r0, [r7, #28]
 8003ba0:	f7ff ff7a 	bl	8003a98 <prvInsertTimerInActiveList>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	69f8      	ldr	r0, [r7, #28]
 8003bc6:	f7ff fe71 	bl	80038ac <prvReloadTimer>
 8003bca:	e008      	b.n	8003bde <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	69f8      	ldr	r0, [r7, #28]
 8003be4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003be6:	e044      	b.n	8003c72 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003bfa:	e03a      	b.n	8003c72 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	617b      	str	r3, [r7, #20]
    }
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	18d1      	adds	r1, r2, r3
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	69f8      	ldr	r0, [r7, #28]
 8003c40:	f7ff ff2a 	bl	8003a98 <prvInsertTimerInActiveList>
                        break;
 8003c44:	e015      	b.n	8003c72 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003c54:	69f8      	ldr	r0, [r7, #28]
 8003c56:	f000 fc31 	bl	80044bc <vPortFree>
 8003c5a:	e00a      	b.n	8003c72 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c6e:	e000      	b.n	8003c72 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003c70:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <prvProcessReceivedCommands+0x178>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f107 0108 	add.w	r1, r7, #8
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe fbe3 	bl	8002448 <xQueueReceive>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f af4d 	bne.w	8003b24 <prvProcessReceivedCommands+0x8>
        }
    }
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000254 	.word	0x20000254

08003c98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c9e:	e009      	b.n	8003cb4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <prvSwitchTimerLists+0x44>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003caa:	f04f 31ff 	mov.w	r1, #4294967295
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f7ff fe1e 	bl	80038f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <prvSwitchTimerLists+0x44>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <prvSwitchTimerLists+0x44>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <prvSwitchTimerLists+0x48>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <prvSwitchTimerLists+0x44>)
 8003cca:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <prvSwitchTimerLists+0x48>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
    }
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000024c 	.word	0x2000024c
 8003ce0:	20000250 	.word	0x20000250

08003ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ce8:	f000 f9dc 	bl	80040a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <prvCheckForValidListAndQueue+0x54>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11d      	bne.n	8003d30 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003cf4:	4811      	ldr	r0, [pc, #68]	; (8003d3c <prvCheckForValidListAndQueue+0x58>)
 8003cf6:	f7fe fa0f 	bl	8002118 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003cfa:	4811      	ldr	r0, [pc, #68]	; (8003d40 <prvCheckForValidListAndQueue+0x5c>)
 8003cfc:	f7fe fa0c 	bl	8002118 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <prvCheckForValidListAndQueue+0x60>)
 8003d02:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <prvCheckForValidListAndQueue+0x58>)
 8003d04:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <prvCheckForValidListAndQueue+0x64>)
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <prvCheckForValidListAndQueue+0x5c>)
 8003d0a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	210c      	movs	r1, #12
 8003d10:	200a      	movs	r0, #10
 8003d12:	f7fe fb21 	bl	8002358 <xQueueGenericCreate>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <prvCheckForValidListAndQueue+0x54>)
 8003d1a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <prvCheckForValidListAndQueue+0x54>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <prvCheckForValidListAndQueue+0x54>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4908      	ldr	r1, [pc, #32]	; (8003d4c <prvCheckForValidListAndQueue+0x68>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fd2a 	bl	8002784 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d30:	f000 f9e8 	bl	8004104 <vPortExitCritical>
    }
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000254 	.word	0x20000254
 8003d3c:	20000224 	.word	0x20000224
 8003d40:	20000238 	.word	0x20000238
 8003d44:	2000024c 	.word	0x2000024c
 8003d48:	20000250 	.word	0x20000250
 8003d4c:	08006ea0 	.word	0x08006ea0

08003d50 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b04      	subs	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <pxPortInitialiseStack+0x64>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b14      	subs	r3, #20
 8003d8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b04      	subs	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f06f 0202 	mvn.w	r2, #2
 8003d9e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b20      	subs	r3, #32
 8003da4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003da6:	68fb      	ldr	r3, [r7, #12]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	08003db9 	.word	0x08003db9

08003db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <prvTaskExitError+0x54>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d00a      	beq.n	8003de2 <prvTaskExitError+0x2a>
        __asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
    }
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <prvTaskExitError+0x28>
        __asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60bb      	str	r3, [r7, #8]
    }
 8003df4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003df6:	bf00      	nop
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0fc      	beq.n	8003df8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000010 	.word	0x20000010

08003e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <pxCurrentTCBConst2>)
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	6808      	ldr	r0, [r1, #0]
 8003e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1a:	f380 8809 	msr	PSP, r0
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8811 	msr	BASEPRI, r0
 8003e2a:	4770      	bx	lr
 8003e2c:	f3af 8000 	nop.w

08003e30 <pxCurrentTCBConst2>:
 8003e30:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e38:	4808      	ldr	r0, [pc, #32]	; (8003e5c <prvPortStartFirstTask+0x24>)
 8003e3a:	6800      	ldr	r0, [r0, #0]
 8003e3c:	6800      	ldr	r0, [r0, #0]
 8003e3e:	f380 8808 	msr	MSP, r0
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8814 	msr	CONTROL, r0
 8003e4a:	b662      	cpsie	i
 8003e4c:	b661      	cpsie	f
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	df00      	svc	0
 8003e58:	bf00      	nop
 8003e5a:	0000      	.short	0x0000
 8003e5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop

08003e64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e6a:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <xPortStartScheduler+0x120>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a46      	ldr	r2, [pc, #280]	; (8003f88 <xPortStartScheduler+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10a      	bne.n	8003e8a <xPortStartScheduler+0x26>
        __asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	613b      	str	r3, [r7, #16]
    }
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <xPortStartScheduler+0x120>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	; (8003f8c <xPortStartScheduler+0x128>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10a      	bne.n	8003eaa <xPortStartScheduler+0x46>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60fb      	str	r3, [r7, #12]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <xPortStartScheduler+0x12c>)
 8003eac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <xPortStartScheduler+0x130>)
 8003ed0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <xPortStartScheduler+0x134>)
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ed8:	e009      	b.n	8003eee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <xPortStartScheduler+0x134>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	; (8003f98 <xPortStartScheduler+0x134>)
 8003ee2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d0ef      	beq.n	8003eda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003efa:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <xPortStartScheduler+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1c3 0307 	rsb	r3, r3, #7
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00a      	beq.n	8003f1c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	60bb      	str	r3, [r7, #8]
    }
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <xPortStartScheduler+0x134>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <xPortStartScheduler+0x134>)
 8003f24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <xPortStartScheduler+0x134>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <xPortStartScheduler+0x134>)
 8003f30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <xPortStartScheduler+0x138>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <xPortStartScheduler+0x138>)
 8003f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <xPortStartScheduler+0x138>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <xPortStartScheduler+0x138>)
 8003f4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f52:	f000 f963 	bl	800421c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <xPortStartScheduler+0x13c>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f5c:	f000 f982 	bl	8004264 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <xPortStartScheduler+0x140>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <xPortStartScheduler+0x140>)
 8003f66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f6c:	f7ff ff64 	bl	8003e38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f70:	f7ff f8d8 	bl	8003124 <vTaskSwitchContext>
    prvTaskExitError();
 8003f74:	f7ff ff20 	bl	8003db8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000ed00 	.word	0xe000ed00
 8003f88:	410fc271 	.word	0x410fc271
 8003f8c:	410fc270 	.word	0x410fc270
 8003f90:	e000e400 	.word	0xe000e400
 8003f94:	20000260 	.word	0x20000260
 8003f98:	20000264 	.word	0x20000264
 8003f9c:	e000ed20 	.word	0xe000ed20
 8003fa0:	20000010 	.word	0x20000010
 8003fa4:	e000ef34 	.word	0xe000ef34

08003fa8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <vInitPrioGroupValue+0xe4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	; (8004090 <vInitPrioGroupValue+0xe8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10a      	bne.n	8003fce <vInitPrioGroupValue+0x26>
        __asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	613b      	str	r3, [r7, #16]
    }
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fce:	4b2f      	ldr	r3, [pc, #188]	; (800408c <vInitPrioGroupValue+0xe4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <vInitPrioGroupValue+0xec>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10a      	bne.n	8003fee <vInitPrioGroupValue+0x46>
        __asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60fb      	str	r3, [r7, #12]
    }
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <vInitPrioGroupValue+0xf0>)
 8003ff0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	22ff      	movs	r2, #255	; 0xff
 8003ffe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <vInitPrioGroupValue+0xf4>)
 8004014:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004016:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004018:	2207      	movs	r2, #7
 800401a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800401c:	e009      	b.n	8004032 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004026:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d0ef      	beq.n	800401e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1c3 0307 	rsb	r3, r3, #7
 8004046:	2b04      	cmp	r3, #4
 8004048:	d00a      	beq.n	8004060 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60bb      	str	r3, [r7, #8]
    }
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004068:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004072:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <vInitPrioGroupValue+0xf8>)
 8004074:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000ed00 	.word	0xe000ed00
 8004090:	410fc271 	.word	0x410fc271
 8004094:	410fc270 	.word	0x410fc270
 8004098:	e000e400 	.word	0xe000e400
 800409c:	20000260 	.word	0x20000260
 80040a0:	20000264 	.word	0x20000264

080040a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
        __asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	607b      	str	r3, [r7, #4]
    }
 80040bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <vPortEnterCritical+0x58>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <vPortEnterCritical+0x58>)
 80040c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <vPortEnterCritical+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10f      	bne.n	80040f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <vPortEnterCritical+0x5c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	603b      	str	r3, [r7, #0]
    }
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <vPortEnterCritical+0x4a>
    }
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	20000010 	.word	0x20000010
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <vPortExitCritical+0x50>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <vPortExitCritical+0x24>
        __asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	607b      	str	r3, [r7, #4]
    }
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <vPortExitCritical+0x50>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <vPortExitCritical+0x50>)
 8004130:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <vPortExitCritical+0x50>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <vPortExitCritical+0x42>
 800413a:	2300      	movs	r3, #0
 800413c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004144:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000010 	.word	0x20000010
	...

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004184:	f380 8811 	msr	BASEPRI, r0
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f7fe ffc8 	bl	8003124 <vTaskSwitchContext>
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f380 8811 	msr	BASEPRI, r0
 800419c:	bc09      	pop	{r0, r3}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a6:	f01e 0f10 	tst.w	lr, #16
 80041aa:	bf08      	it	eq
 80041ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b0:	f380 8809 	msr	PSP, r0
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst>:
 80041c0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
        __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
    }
 80041e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80041e2:	f001 fdcf 	bl	8005d84 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041e6:	f7fe fe83 	bl	8002ef0 <xTaskIncrementTick>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041f0:	f001 fe26 	bl	8005e40 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <SysTick_Handler+0x50>)
 80041f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e001      	b.n	8004202 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041fe:	f001 fe03 	bl	8005e08 <SEGGER_SYSVIEW_RecordExitISR>
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f383 8811 	msr	BASEPRI, r3
    }
 800420c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <vPortSetupTimerInterrupt+0x34>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <vPortSetupTimerInterrupt+0x38>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <vPortSetupTimerInterrupt+0x3c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <vPortSetupTimerInterrupt+0x40>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <vPortSetupTimerInterrupt+0x44>)
 800423a:	3b01      	subs	r3, #1
 800423c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <vPortSetupTimerInterrupt+0x34>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010
 8004254:	e000e018 	.word	0xe000e018
 8004258:	20000000 	.word	0x20000000
 800425c:	10624dd3 	.word	0x10624dd3
 8004260:	e000e014 	.word	0xe000e014

08004264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004274 <vPortEnableVFP+0x10>
 8004268:	6801      	ldr	r1, [r0, #0]
 800426a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800426e:	6001      	str	r1, [r0, #0]
 8004270:	4770      	bx	lr
 8004272:	0000      	.short	0x0000
 8004274:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop

0800427c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004282:	f3ef 8305 	mrs	r3, IPSR
 8004286:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b0f      	cmp	r3, #15
 800428c:	d914      	bls.n	80042b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <vPortValidateInterruptPriority+0x70>)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <vPortValidateInterruptPriority+0x74>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	7afa      	ldrb	r2, [r7, #11]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20a      	bcs.n	80042b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	607b      	str	r3, [r7, #4]
    }
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <vPortValidateInterruptPriority+0x78>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <vPortValidateInterruptPriority+0x7c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d90a      	bls.n	80042de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	603b      	str	r3, [r7, #0]
    }
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <vPortValidateInterruptPriority+0x60>
    }
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000e3f0 	.word	0xe000e3f0
 80042f0:	20000260 	.word	0x20000260
 80042f4:	e000ed0c 	.word	0xe000ed0c
 80042f8:	20000264 	.word	0x20000264

080042fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004308:	f7fe fcc2 	bl	8002c90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800430c:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <pvPortMalloc+0x1a8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004314:	f000 f934 	bl	8004580 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004318:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <pvPortMalloc+0x1ac>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 80a7 	bne.w	8004474 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02d      	beq.n	8004388 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800432c:	2208      	movs	r2, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d227      	bcs.n	8004388 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004338:	2208      	movs	r2, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	2b00      	cmp	r3, #0
 8004348:	d021      	beq.n	800438e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f023 0307 	bic.w	r3, r3, #7
 8004350:	3308      	adds	r3, #8
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d214      	bcs.n	8004382 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	3308      	adds	r3, #8
 8004360:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <pvPortMalloc+0x92>
        __asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	617b      	str	r3, [r7, #20]
    }
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004386:	e002      	b.n	800438e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	e000      	b.n	8004390 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800438e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d06e      	beq.n	8004474 <pvPortMalloc+0x178>
 8004396:	4b45      	ldr	r3, [pc, #276]	; (80044ac <pvPortMalloc+0x1b0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d869      	bhi.n	8004474 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <pvPortMalloc+0x1b4>)
 80043a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043a4:	4b42      	ldr	r3, [pc, #264]	; (80044b0 <pvPortMalloc+0x1b4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043aa:	e004      	b.n	80043b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d903      	bls.n	80043c8 <pvPortMalloc+0xcc>
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f1      	bne.n	80043ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043c8:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <pvPortMalloc+0x1a8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d050      	beq.n	8004474 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2208      	movs	r2, #8
 80043d8:	4413      	add	r3, r2
 80043da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	2308      	movs	r3, #8
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d91f      	bls.n	8004434 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <pvPortMalloc+0x120>
        __asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	613b      	str	r3, [r7, #16]
    }
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad2      	subs	r2, r2, r3
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800442e:	69b8      	ldr	r0, [r7, #24]
 8004430:	f000 f908 	bl	8004644 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <pvPortMalloc+0x1b0>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <pvPortMalloc+0x1b0>)
 8004440:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <pvPortMalloc+0x1b0>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <pvPortMalloc+0x1b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d203      	bcs.n	8004456 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <pvPortMalloc+0x1b0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <pvPortMalloc+0x1b8>)
 8004454:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <pvPortMalloc+0x1ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	431a      	orrs	r2, r3
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <pvPortMalloc+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <pvPortMalloc+0x1bc>)
 8004472:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004474:	f7fe fc1a 	bl	8002cac <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <pvPortMalloc+0x19c>
        __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60fb      	str	r3, [r7, #12]
    }
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <pvPortMalloc+0x19a>
    return pvReturn;
 8004498:	69fb      	ldr	r3, [r7, #28]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3728      	adds	r7, #40	; 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20012e70 	.word	0x20012e70
 80044a8:	20012e84 	.word	0x20012e84
 80044ac:	20012e74 	.word	0x20012e74
 80044b0:	20012e68 	.word	0x20012e68
 80044b4:	20012e78 	.word	0x20012e78
 80044b8:	20012e7c 	.word	0x20012e7c

080044bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04d      	beq.n	800456a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044ce:	2308      	movs	r3, #8
 80044d0:	425b      	negs	r3, r3
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <vPortFree+0xb8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <vPortFree+0x44>
        __asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60fb      	str	r3, [r7, #12]
    }
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <vPortFree+0x62>
        __asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60bb      	str	r3, [r7, #8]
    }
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <vPortFree+0xb8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01e      	beq.n	800456a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11a      	bne.n	800456a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <vPortFree+0xb8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004544:	f7fe fba4 	bl	8002c90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <vPortFree+0xbc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4413      	add	r3, r2
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <vPortFree+0xbc>)
 8004554:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004556:	6938      	ldr	r0, [r7, #16]
 8004558:	f000 f874 	bl	8004644 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800455c:	4b07      	ldr	r3, [pc, #28]	; (800457c <vPortFree+0xc0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a06      	ldr	r2, [pc, #24]	; (800457c <vPortFree+0xc0>)
 8004564:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004566:	f7fe fba1 	bl	8002cac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20012e84 	.word	0x20012e84
 8004578:	20012e74 	.word	0x20012e74
 800457c:	20012e80 	.word	0x20012e80

08004580 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004586:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800458a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <prvHeapInit+0xac>)
 800458e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3307      	adds	r3, #7
 800459e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	4a1f      	ldr	r2, [pc, #124]	; (800462c <prvHeapInit+0xac>)
 80045b0:	4413      	add	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <prvHeapInit+0xb0>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <prvHeapInit+0xb0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4413      	add	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045cc:	2208      	movs	r2, #8
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <prvHeapInit+0xb4>)
 80045e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <prvHeapInit+0xb4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <prvHeapInit+0xb4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <prvHeapInit+0xb4>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <prvHeapInit+0xb8>)
 800460e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <prvHeapInit+0xbc>)
 8004616:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <prvHeapInit+0xc0>)
 800461a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000268 	.word	0x20000268
 8004630:	20012e68 	.word	0x20012e68
 8004634:	20012e70 	.word	0x20012e70
 8004638:	20012e78 	.word	0x20012e78
 800463c:	20012e74 	.word	0x20012e74
 8004640:	20012e84 	.word	0x20012e84

08004644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800464c:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <prvInsertBlockIntoFreeList+0xac>)
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e002      	b.n	8004658 <prvInsertBlockIntoFreeList+0x14>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d8f7      	bhi.n	8004652 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d108      	bne.n	8004686 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d118      	bne.n	80046cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <prvInsertBlockIntoFreeList+0xb0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d00d      	beq.n	80046c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e008      	b.n	80046d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <prvInsertBlockIntoFreeList+0xb0>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e003      	b.n	80046d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d002      	beq.n	80046e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20012e68 	.word	0x20012e68
 80046f4:	20012e70 	.word	0x20012e70

080046f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046fc:	4803      	ldr	r0, [pc, #12]	; (800470c <_cbSendSystemDesc+0x14>)
 80046fe:	f001 faeb 	bl	8005cd8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <_cbSendSystemDesc+0x18>)
 8004704:	f001 fae8 	bl	8005cd8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	08006ea8 	.word	0x08006ea8
 8004710:	08006eec 	.word	0x08006eec

08004714 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <SEGGER_SYSVIEW_Conf+0x20>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <SEGGER_SYSVIEW_Conf+0x20>)
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <SEGGER_SYSVIEW_Conf+0x24>)
 8004722:	4a06      	ldr	r2, [pc, #24]	; (800473c <SEGGER_SYSVIEW_Conf+0x28>)
 8004724:	f000 fe56 	bl	80053d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004728:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800472c:	f000 fe96 	bl	800545c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000000 	.word	0x20000000
 8004738:	080046f9 	.word	0x080046f9
 800473c:	08006f8c 	.word	0x08006f8c

08004740 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	e033      	b.n	80047b4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800474c:	491e      	ldr	r1, [pc, #120]	; (80047c8 <_cbSendTaskList+0x88>)
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	491a      	ldr	r1, [pc, #104]	; (80047c8 <_cbSendTaskList+0x88>)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	3304      	adds	r3, #4
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	4c16      	ldr	r4, [pc, #88]	; (80047c8 <_cbSendTaskList+0x88>)
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4423      	add	r3, r4
 800477c:	3308      	adds	r3, #8
 800477e:	681c      	ldr	r4, [r3, #0]
 8004780:	4d11      	ldr	r5, [pc, #68]	; (80047c8 <_cbSendTaskList+0x88>)
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	442b      	add	r3, r5
 800478e:	330c      	adds	r3, #12
 8004790:	681d      	ldr	r5, [r3, #0]
 8004792:	4e0d      	ldr	r6, [pc, #52]	; (80047c8 <_cbSendTaskList+0x88>)
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4433      	add	r3, r6
 80047a0:	3310      	adds	r3, #16
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	462b      	mov	r3, r5
 80047a8:	4622      	mov	r2, r4
 80047aa:	f000 f8bd 	bl	8004928 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3301      	adds	r3, #1
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <_cbSendTaskList+0x8c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3c6      	bcc.n	800474c <_cbSendTaskList+0xc>
  }
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c8:	20012e88 	.word	0x20012e88
 80047cc:	20012f28 	.word	0x20012f28

080047d0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80047d8:	f7fe fb78 	bl	8002ecc <xTaskGetTickCountFromISR>
 80047dc:	4603      	mov	r3, r0
 80047de:	2200      	movs	r2, #0
 80047e0:	469a      	mov	sl, r3
 80047e2:	4693      	mov	fp, r2
 80047e4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	f04f 0a00 	mov.w	sl, #0
 80047f4:	f04f 0b00 	mov.w	fp, #0
 80047f8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047fc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004800:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004804:	4652      	mov	r2, sl
 8004806:	465b      	mov	r3, fp
 8004808:	1a14      	subs	r4, r2, r0
 800480a:	eb63 0501 	sbc.w	r5, r3, r1
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	00ab      	lsls	r3, r5, #2
 8004818:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800481c:	00a2      	lsls	r2, r4, #2
 800481e:	4614      	mov	r4, r2
 8004820:	461d      	mov	r5, r3
 8004822:	eb14 0800 	adds.w	r8, r4, r0
 8004826:	eb45 0901 	adc.w	r9, r5, r1
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800483a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800483e:	4690      	mov	r8, r2
 8004840:	4699      	mov	r9, r3
 8004842:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004846:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004858 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004866:	2205      	movs	r2, #5
 8004868:	492b      	ldr	r1, [pc, #172]	; (8004918 <SYSVIEW_AddTask+0xc0>)
 800486a:	68b8      	ldr	r0, [r7, #8]
 800486c:	f001 fdc4 	bl	80063f8 <memcmp>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d04b      	beq.n	800490e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <SYSVIEW_AddTask+0xc4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b07      	cmp	r3, #7
 800487c:	d903      	bls.n	8004886 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800487e:	4828      	ldr	r0, [pc, #160]	; (8004920 <SYSVIEW_AddTask+0xc8>)
 8004880:	f001 fd28 	bl	80062d4 <SEGGER_SYSVIEW_Warn>
    return;
 8004884:	e044      	b.n	8004910 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004886:	4b25      	ldr	r3, [pc, #148]	; (800491c <SYSVIEW_AddTask+0xc4>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4926      	ldr	r1, [pc, #152]	; (8004924 <SYSVIEW_AddTask+0xcc>)
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <SYSVIEW_AddTask+0xc4>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4921      	ldr	r1, [pc, #132]	; (8004924 <SYSVIEW_AddTask+0xcc>)
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3304      	adds	r3, #4
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <SYSVIEW_AddTask+0xc4>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	491b      	ldr	r1, [pc, #108]	; (8004924 <SYSVIEW_AddTask+0xcc>)
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	3308      	adds	r3, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <SYSVIEW_AddTask+0xc4>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4916      	ldr	r1, [pc, #88]	; (8004924 <SYSVIEW_AddTask+0xcc>)
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	330c      	adds	r3, #12
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <SYSVIEW_AddTask+0xc4>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4910      	ldr	r1, [pc, #64]	; (8004924 <SYSVIEW_AddTask+0xcc>)
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3310      	adds	r3, #16
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <SYSVIEW_AddTask+0xc4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <SYSVIEW_AddTask+0xc4>)
 80048fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f80e 	bl	8004928 <SYSVIEW_SendTaskInfo>
 800490c:	e000      	b.n	8004910 <SYSVIEW_AddTask+0xb8>
    return;
 800490e:	bf00      	nop

}
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	08006efc 	.word	0x08006efc
 800491c:	20012f28 	.word	0x20012f28
 8004920:	08006f04 	.word	0x08006f04
 8004924:	20012e88 	.word	0x20012e88

08004928 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	2214      	movs	r2, #20
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fd78 	bl	8006434 <memset>
  TaskInfo.TaskID     = TaskID;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4618      	mov	r0, r3
 800495e:	f001 f8c3 	bl	8005ae8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004962:	bf00      	nop
 8004964:	3728      	adds	r7, #40	; 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <_DoInit+0x98>)
 8004974:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2203      	movs	r2, #3
 8004980:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <_DoInit+0x9c>)
 8004986:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a20      	ldr	r2, [pc, #128]	; (8004a0c <_DoInit+0xa0>)
 800498c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004994:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <_DoInit+0x9c>)
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <_DoInit+0xa4>)
 80049b2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2210      	movs	r2, #16
 80049b8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3307      	adds	r3, #7
 80049d0:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <_DoInit+0xa8>)
 80049d2:	6810      	ldr	r0, [r2, #0]
 80049d4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049d6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <_DoInit+0xac>)
 80049de:	6810      	ldr	r0, [r2, #0]
 80049e0:	6018      	str	r0, [r3, #0]
 80049e2:	8891      	ldrh	r1, [r2, #4]
 80049e4:	7992      	ldrb	r2, [r2, #6]
 80049e6:	8099      	strh	r1, [r3, #4]
 80049e8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049ea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049f4:	f3bf 8f5f 	dmb	sy
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	20012f2c 	.word	0x20012f2c
 8004a08:	08006f54 	.word	0x08006f54
 8004a0c:	20012fd4 	.word	0x20012fd4
 8004a10:	200133d4 	.word	0x200133d4
 8004a14:	08006f60 	.word	0x08006f60
 8004a18:	08006f64 	.word	0x08006f64

08004a1c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d905      	bls.n	8004a4c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e007      	b.n	8004a5c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	1acb      	subs	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bf28      	it	cs
 8004a6a:	4613      	movcs	r3, r2
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4293      	cmp	r3, r2
 8004a74:	bf28      	it	cs
 8004a76:	4613      	movcs	r3, r2
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	6978      	ldr	r0, [r7, #20]
 8004a8a:	f001 fcc5 	bl	8006418 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	4413      	add	r3, r2
 8004a94:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	4413      	add	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	4413      	add	r3, r2
 8004aac:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d101      	bne.n	8004abc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004abc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1b2      	bne.n	8004a32 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004acc:	6a3b      	ldr	r3, [r7, #32]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3728      	adds	r7, #40	; 0x28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b088      	sub	sp, #32
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d911      	bls.n	8004b1e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6938      	ldr	r0, [r7, #16]
 8004b0a:	f001 fc85 	bl	8006418 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b0e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	441a      	add	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004b1c:	e01f      	b.n	8004b5e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	6938      	ldr	r0, [r7, #16]
 8004b32:	f001 fc71 	bl	8006418 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6938      	ldr	r0, [r7, #16]
 8004b50:	f001 fc62 	bl	8006418 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b54:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	60da      	str	r2, [r3, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d808      	bhi.n	8004b94 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad2      	subs	r2, r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e004      	b.n	8004b9e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004b9e:	697b      	ldr	r3, [r7, #20]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004bb8:	4b3e      	ldr	r3, [pc, #248]	; (8004cb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004bba:	623b      	str	r3, [r7, #32]
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <SEGGER_RTT_ReadNoLock+0x1e>
 8004bc6:	f7ff fed1 	bl	800496c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	3360      	adds	r3, #96	; 0x60
 8004bd6:	4a37      	ldr	r2, [pc, #220]	; (8004cb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d92b      	bls.n	8004c50 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bf28      	it	cs
 8004c0a:	4613      	movcs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	4413      	add	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1e:	f001 fbfb 	bl	8006418 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4413      	add	r3, r2
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d101      	bne.n	8004c50 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bf28      	it	cs
 8004c60:	4613      	movcs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d019      	beq.n	8004c9e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	4413      	add	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	6939      	ldr	r1, [r7, #16]
 8004c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c7a:	f001 fbcd 	bl	8006418 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3730      	adds	r7, #48	; 0x30
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20012f2c 	.word	0x20012f2c

08004cb8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004cd6:	4413      	add	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d029      	beq.n	8004d36 <SEGGER_RTT_WriteNoLock+0x7e>
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d82e      	bhi.n	8004d44 <SEGGER_RTT_WriteNoLock+0x8c>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <SEGGER_RTT_WriteNoLock+0x38>
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d013      	beq.n	8004d16 <SEGGER_RTT_WriteNoLock+0x5e>
 8004cee:	e029      	b.n	8004d44 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004cf0:	6978      	ldr	r0, [r7, #20]
 8004cf2:	f7ff ff38 	bl	8004b66 <_GetAvailWriteSpace>
 8004cf6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d202      	bcs.n	8004d06 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004d04:	e021      	b.n	8004d4a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	69b9      	ldr	r1, [r7, #24]
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff fee1 	bl	8004ad6 <_WriteNoCheck>
    break;
 8004d14:	e019      	b.n	8004d4a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ff25 	bl	8004b66 <_GetAvailWriteSpace>
 8004d1c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4293      	cmp	r3, r2
 8004d24:	bf28      	it	cs
 8004d26:	4613      	movcs	r3, r2
 8004d28:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	6978      	ldr	r0, [r7, #20]
 8004d30:	f7ff fed1 	bl	8004ad6 <_WriteNoCheck>
    break;
 8004d34:	e009      	b.n	8004d4a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	69b9      	ldr	r1, [r7, #24]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff fe6e 	bl	8004a1c <_WriteBlocking>
 8004d40:	61f8      	str	r0, [r7, #28]
    break;
 8004d42:	e002      	b.n	8004d4a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
    break;
 8004d48:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20012f2c 	.word	0x20012f2c

08004d58 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004d64:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <SEGGER_RTT_Write+0x48>)
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <SEGGER_RTT_Write+0x1e>
 8004d72:	f7ff fdfb 	bl	800496c <_DoInit>
  SEGGER_RTT_LOCK();
 8004d76:	f3ef 8311 	mrs	r3, BASEPRI
 8004d7a:	f04f 0120 	mov.w	r1, #32
 8004d7e:	f381 8811 	msr	BASEPRI, r1
 8004d82:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff ff95 	bl	8004cb8 <SEGGER_RTT_WriteNoLock>
 8004d8e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004d96:	697b      	ldr	r3, [r7, #20]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20012f2c 	.word	0x20012f2c

08004da4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004db2:	4b3d      	ldr	r3, [pc, #244]	; (8004ea8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004dc0:	f7ff fdd4 	bl	800496c <_DoInit>
  SEGGER_RTT_LOCK();
 8004dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc8:	f04f 0120 	mov.w	r1, #32
 8004dcc:	f381 8811 	msr	BASEPRI, r1
 8004dd0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dd2:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004dd4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	440b      	add	r3, r1
 8004dea:	3304      	adds	r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3301      	adds	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	dbeb      	blt.n	8004dda <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e02:	e000      	b.n	8004e06 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e04:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	da3f      	bge.n	8004e90 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e10:	6939      	ldr	r1, [r7, #16]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	440b      	add	r3, r1
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e24:	6939      	ldr	r1, [r7, #16]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	440b      	add	r3, r1
 8004e34:	3304      	adds	r3, #4
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e3a:	6939      	ldr	r1, [r7, #16]
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	440b      	add	r3, r1
 8004e48:	3320      	adds	r3, #32
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3328      	adds	r3, #40	; 0x28
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e76:	6939      	ldr	r1, [r7, #16]
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	440b      	add	r3, r1
 8004e84:	332c      	adds	r3, #44	; 0x2c
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e8a:	f3bf 8f5f 	dmb	sy
 8004e8e:	e002      	b.n	8004e96 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20012f2c 	.word	0x20012f2c

08004eac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004eba:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004ec8:	f7ff fd50 	bl	800496c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ecc:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004ece:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d24d      	bcs.n	8004f78 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004edc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee0:	f04f 0120 	mov.w	r1, #32
 8004ee4:	f381 8811 	msr	BASEPRI, r1
 8004ee8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d031      	beq.n	8004f54 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004ef0:	6979      	ldr	r1, [r7, #20]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	440b      	add	r3, r1
 8004efe:	3360      	adds	r3, #96	; 0x60
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	440b      	add	r3, r1
 8004f12:	3364      	adds	r3, #100	; 0x64
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	3368      	adds	r3, #104	; 0x68
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	440b      	add	r3, r1
 8004f3a:	3370      	adds	r3, #112	; 0x70
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	336c      	adds	r3, #108	; 0x6c
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	3374      	adds	r3, #116	; 0x74
 8004f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f66:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f68:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	e002      	b.n	8004f7e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20012f2c 	.word	0x20012f2c

08004f8c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f9c:	e002      	b.n	8004fa4 <_EncodeStr+0x18>
    Len++;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f6      	bne.n	8004f9e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d901      	bls.n	8004fbc <_EncodeStr+0x30>
    Len = Limit;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2bfe      	cmp	r3, #254	; 0xfe
 8004fc0:	d806      	bhi.n	8004fd0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	60fa      	str	r2, [r7, #12]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e011      	b.n	8004ff4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	60fa      	str	r2, [r7, #12]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	60fa      	str	r2, [r7, #12]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	0a19      	lsrs	r1, r3, #8
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	60fa      	str	r2, [r7, #12]
 8004ff0:	b2ca      	uxtb	r2, r1
 8004ff2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004ff8:	e00a      	b.n	8005010 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	1c53      	adds	r3, r2, #1
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	60f9      	str	r1, [r7, #12]
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	701a      	strb	r2, [r3, #0]
    n++;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3301      	adds	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d3f0      	bcc.n	8004ffa <_EncodeStr+0x6e>
  }
  return pPayload;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005046:	4b36      	ldr	r3, [pc, #216]	; (8005120 <_HandleIncomingPacket+0xe0>)
 8005048:	7e1b      	ldrb	r3, [r3, #24]
 800504a:	4618      	mov	r0, r3
 800504c:	1cfb      	adds	r3, r7, #3
 800504e:	2201      	movs	r2, #1
 8005050:	4619      	mov	r1, r3
 8005052:	f7ff fdab 	bl	8004bac <SEGGER_RTT_ReadNoLock>
 8005056:	4603      	mov	r3, r0
 8005058:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dd54      	ble.n	800510a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d032      	beq.n	80050cc <_HandleIncomingPacket+0x8c>
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	dc42      	bgt.n	80050f0 <_HandleIncomingPacket+0xb0>
 800506a:	2b07      	cmp	r3, #7
 800506c:	dc16      	bgt.n	800509c <_HandleIncomingPacket+0x5c>
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd3e      	ble.n	80050f0 <_HandleIncomingPacket+0xb0>
 8005072:	3b01      	subs	r3, #1
 8005074:	2b06      	cmp	r3, #6
 8005076:	d83b      	bhi.n	80050f0 <_HandleIncomingPacket+0xb0>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <_HandleIncomingPacket+0x40>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050a3 	.word	0x080050a3
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050af 	.word	0x080050af
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bb 	.word	0x080050bb
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050c7 	.word	0x080050c7
 800509c:	2b7f      	cmp	r3, #127	; 0x7f
 800509e:	d036      	beq.n	800510e <_HandleIncomingPacket+0xce>
 80050a0:	e026      	b.n	80050f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80050a2:	f000 fba7 	bl	80057f4 <SEGGER_SYSVIEW_Start>
      break;
 80050a6:	e037      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80050a8:	f000 fc5e 	bl	8005968 <SEGGER_SYSVIEW_Stop>
      break;
 80050ac:	e034      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80050ae:	f000 fe37 	bl	8005d20 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80050b2:	e031      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80050b4:	f000 fdfc 	bl	8005cb0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80050b8:	e02e      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80050ba:	f000 fc7b 	bl	80059b4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050be:	e02b      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050c0:	f001 f8ca 	bl	8006258 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80050c4:	e028      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80050c6:	f001 f8a9 	bl	800621c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050ca:	e025      	b.n	8005118 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <_HandleIncomingPacket+0xe0>)
 80050ce:	7e1b      	ldrb	r3, [r3, #24]
 80050d0:	4618      	mov	r0, r3
 80050d2:	1cfb      	adds	r3, r7, #3
 80050d4:	2201      	movs	r2, #1
 80050d6:	4619      	mov	r1, r3
 80050d8:	f7ff fd68 	bl	8004bac <SEGGER_RTT_ReadNoLock>
 80050dc:	4603      	mov	r3, r0
 80050de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dd15      	ble.n	8005112 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 f817 	bl	800611c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80050ee:	e010      	b.n	8005112 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da0e      	bge.n	8005116 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <_HandleIncomingPacket+0xe0>)
 80050fa:	7e1b      	ldrb	r3, [r3, #24]
 80050fc:	4618      	mov	r0, r3
 80050fe:	1cfb      	adds	r3, r7, #3
 8005100:	2201      	movs	r2, #1
 8005102:	4619      	mov	r1, r3
 8005104:	f7ff fd52 	bl	8004bac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005108:	e005      	b.n	8005116 <_HandleIncomingPacket+0xd6>
    }
  }
 800510a:	bf00      	nop
 800510c:	e004      	b.n	8005118 <_HandleIncomingPacket+0xd8>
      break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <_HandleIncomingPacket+0xd8>
      break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <_HandleIncomingPacket+0xd8>
      break;
 8005116:	bf00      	nop
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	200143ec 	.word	0x200143ec

08005124 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	; 0x30
 8005128:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800512a:	2301      	movs	r3, #1
 800512c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005138:	4b31      	ldr	r3, [pc, #196]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
 800513e:	e00b      	b.n	8005158 <_TrySendOverflowPacket+0x34>
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	b2da      	uxtb	r2, r3
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	62f9      	str	r1, [r7, #44]	; 0x2c
 800514a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	09db      	lsrs	r3, r3, #7
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	2b7f      	cmp	r3, #127	; 0x7f
 800515c:	d8f0      	bhi.n	8005140 <_TrySendOverflowPacket+0x1c>
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <_TrySendOverflowPacket+0xe0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005174:	4b22      	ldr	r3, [pc, #136]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	e00b      	b.n	80051a0 <_TrySendOverflowPacket+0x7c>
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	6279      	str	r1, [r7, #36]	; 0x24
 8005192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	09db      	lsrs	r3, r3, #7
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b7f      	cmp	r3, #127	; 0x7f
 80051a4:	d8f0      	bhi.n	8005188 <_TrySendOverflowPacket+0x64>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	627a      	str	r2, [r7, #36]	; 0x24
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	4618      	mov	r0, r3
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fb f802 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051cc:	4603      	mov	r3, r0
 80051ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e004      	b.n	80051f4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	3301      	adds	r3, #1
 80051f0:	4a03      	ldr	r2, [pc, #12]	; (8005200 <_TrySendOverflowPacket+0xdc>)
 80051f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80051f4:	693b      	ldr	r3, [r7, #16]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3730      	adds	r7, #48	; 0x30
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	200143ec 	.word	0x200143ec
 8005204:	e0001004 	.word	0xe0001004

08005208 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005214:	4b6c      	ldr	r3, [pc, #432]	; (80053c8 <_SendPacket+0x1c0>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d010      	beq.n	800523e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800521c:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <_SendPacket+0x1c0>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a3 	beq.w	800536c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005226:	4b68      	ldr	r3, [pc, #416]	; (80053c8 <_SendPacket+0x1c0>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d109      	bne.n	8005242 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800522e:	f7ff ff79 	bl	8005124 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005232:	4b65      	ldr	r3, [pc, #404]	; (80053c8 <_SendPacket+0x1c0>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	f040 809a 	bne.w	8005370 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800523c:	e001      	b.n	8005242 <_SendPacket+0x3a>
    goto Send;
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <_SendPacket+0x3c>
Send:
 8005242:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b1f      	cmp	r3, #31
 8005248:	d809      	bhi.n	800525e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800524a:	4b5f      	ldr	r3, [pc, #380]	; (80053c8 <_SendPacket+0x1c0>)
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	f040 808b 	bne.w	8005374 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b17      	cmp	r3, #23
 8005262:	d807      	bhi.n	8005274 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e03d      	b.n	80052f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b7f      	cmp	r3, #127	; 0x7f
 8005280:	d912      	bls.n	80052a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	09da      	lsrs	r2, r3, #7
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b01      	subs	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	3a01      	subs	r2, #1
 800529a:	60fa      	str	r2, [r7, #12]
 800529c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e006      	b.n	80052b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ba:	d912      	bls.n	80052e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	09da      	lsrs	r2, r3, #7
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	3a01      	subs	r2, #1
 80052d4:	60fa      	str	r2, [r7, #12]
 80052d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e006      	b.n	80052f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052f0:	4b36      	ldr	r3, [pc, #216]	; (80053cc <_SendPacket+0x1c4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <_SendPacket+0x1c0>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	e00b      	b.n	8005322 <_SendPacket+0x11a>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	1c59      	adds	r1, r3, #1
 8005312:	6279      	str	r1, [r7, #36]	; 0x24
 8005314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	09db      	lsrs	r3, r3, #7
 8005320:	623b      	str	r3, [r7, #32]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2b7f      	cmp	r3, #127	; 0x7f
 8005326:	d8f0      	bhi.n	800530a <_SendPacket+0x102>
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	627a      	str	r2, [r7, #36]	; 0x24
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005338:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <_SendPacket+0x1c0>)
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	4618      	mov	r0, r3
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	461a      	mov	r2, r3
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	f7fa ff42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800534c:	4603      	mov	r3, r0
 800534e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005356:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <_SendPacket+0x1c0>)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	60d3      	str	r3, [r2, #12]
 800535c:	e00b      	b.n	8005376 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <_SendPacket+0x1c0>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <_SendPacket+0x1c0>)
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e004      	b.n	8005376 <_SendPacket+0x16e>
    goto SendDone;
 800536c:	bf00      	nop
 800536e:	e002      	b.n	8005376 <_SendPacket+0x16e>
      goto SendDone;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <_SendPacket+0x16e>
      goto SendDone;
 8005374:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <_SendPacket+0x1c0>)
 8005378:	7e1b      	ldrb	r3, [r3, #24]
 800537a:	4619      	mov	r1, r3
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <_SendPacket+0x1c8>)
 800537e:	460b      	mov	r3, r1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	440b      	add	r3, r1
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	336c      	adds	r3, #108	; 0x6c
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <_SendPacket+0x1c0>)
 800538e:	7e1b      	ldrb	r3, [r3, #24]
 8005390:	4618      	mov	r0, r3
 8005392:	490f      	ldr	r1, [pc, #60]	; (80053d0 <_SendPacket+0x1c8>)
 8005394:	4603      	mov	r3, r0
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4403      	add	r3, r0
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	3370      	adds	r3, #112	; 0x70
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d00b      	beq.n	80053be <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053a6:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <_SendPacket+0x1c0>)
 80053a8:	789b      	ldrb	r3, [r3, #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <_SendPacket+0x1c0>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053b4:	f7ff fe44 	bl	8005040 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <_SendPacket+0x1c0>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053be:	bf00      	nop
 80053c0:	3728      	adds	r7, #40	; 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200143ec 	.word	0x200143ec
 80053cc:	e0001004 	.word	0xe0001004
 80053d0:	20012f2c 	.word	0x20012f2c

080053d4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053e2:	2300      	movs	r3, #0
 80053e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053e8:	4917      	ldr	r1, [pc, #92]	; (8005448 <SEGGER_SYSVIEW_Init+0x74>)
 80053ea:	4818      	ldr	r0, [pc, #96]	; (800544c <SEGGER_SYSVIEW_Init+0x78>)
 80053ec:	f7ff fcda 	bl	8004da4 <SEGGER_RTT_AllocUpBuffer>
 80053f0:	4603      	mov	r3, r0
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 80053f6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 80053fa:	785a      	ldrb	r2, [r3, #1]
 80053fc:	4b14      	ldr	r3, [pc, #80]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 80053fe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 8005402:	7e1b      	ldrb	r3, [r3, #24]
 8005404:	4618      	mov	r0, r3
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2308      	movs	r3, #8
 800540c:	4a11      	ldr	r2, [pc, #68]	; (8005454 <SEGGER_SYSVIEW_Init+0x80>)
 800540e:	490f      	ldr	r1, [pc, #60]	; (800544c <SEGGER_SYSVIEW_Init+0x78>)
 8005410:	f7ff fd4c 	bl	8004eac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 8005416:	2200      	movs	r2, #0
 8005418:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <SEGGER_SYSVIEW_Init+0x84>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 8005420:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005434:	4a06      	ldr	r2, [pc, #24]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <SEGGER_SYSVIEW_Init+0x7c>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200133e4 	.word	0x200133e4
 800544c:	08006f6c 	.word	0x08006f6c
 8005450:	200143ec 	.word	0x200143ec
 8005454:	200143e4 	.word	0x200143e4
 8005458:	e0001004 	.word	0xe0001004

0800545c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005464:	4a04      	ldr	r2, [pc, #16]	; (8005478 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6113      	str	r3, [r2, #16]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	200143ec 	.word	0x200143ec

0800547c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005484:	f3ef 8311 	mrs	r3, BASEPRI
 8005488:	f04f 0120 	mov.w	r1, #32
 800548c:	f381 8811 	msr	BASEPRI, r1
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	4808      	ldr	r0, [pc, #32]	; (80054b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005494:	f7ff fdc7 	bl	8005026 <_PreparePacket>
 8005498:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	68b8      	ldr	r0, [r7, #8]
 80054a0:	f7ff feb2 	bl	8005208 <_SendPacket>
  RECORD_END();
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f383 8811 	msr	BASEPRI, r3
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	2001441c 	.word	0x2001441c

080054b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054c2:	f3ef 8311 	mrs	r3, BASEPRI
 80054c6:	f04f 0120 	mov.w	r1, #32
 80054ca:	f381 8811 	msr	BASEPRI, r1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	4816      	ldr	r0, [pc, #88]	; (800552c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80054d2:	f7ff fda8 	bl	8005026 <_PreparePacket>
 80054d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e00b      	b.n	80054fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	61f9      	str	r1, [r7, #28]
 80054f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b7f      	cmp	r3, #127	; 0x7f
 8005502:	d8f0      	bhi.n	80054e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	6938      	ldr	r0, [r7, #16]
 800551a:	f7ff fe75 	bl	8005208 <_SendPacket>
  RECORD_END();
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f383 8811 	msr	BASEPRI, r3
}
 8005524:	bf00      	nop
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	2001441c 	.word	0x2001441c

08005530 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	; 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800553c:	f3ef 8311 	mrs	r3, BASEPRI
 8005540:	f04f 0120 	mov.w	r1, #32
 8005544:	f381 8811 	msr	BASEPRI, r1
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	4825      	ldr	r0, [pc, #148]	; (80055e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800554c:	f7ff fd6b 	bl	8005026 <_PreparePacket>
 8005550:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	e00b      	b.n	8005578 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	62f9      	str	r1, [r7, #44]	; 0x2c
 800556a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	2b7f      	cmp	r3, #127	; 0x7f
 800557c:	d8f0      	bhi.n	8005560 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	623b      	str	r3, [r7, #32]
 8005596:	e00b      	b.n	80055b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	6279      	str	r1, [r7, #36]	; 0x24
 80055a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	623b      	str	r3, [r7, #32]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b7f      	cmp	r3, #127	; 0x7f
 80055b4:	d8f0      	bhi.n	8005598 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	627a      	str	r2, [r7, #36]	; 0x24
 80055bc:	6a3a      	ldr	r2, [r7, #32]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	69b8      	ldr	r0, [r7, #24]
 80055cc:	f7ff fe1c 	bl	8005208 <_SendPacket>
  RECORD_END();
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f383 8811 	msr	BASEPRI, r3
}
 80055d6:	bf00      	nop
 80055d8:	3730      	adds	r7, #48	; 0x30
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	2001441c 	.word	0x2001441c

080055e4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08e      	sub	sp, #56	; 0x38
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80055f2:	f3ef 8311 	mrs	r3, BASEPRI
 80055f6:	f04f 0120 	mov.w	r1, #32
 80055fa:	f381 8811 	msr	BASEPRI, r1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	4832      	ldr	r0, [pc, #200]	; (80056cc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005602:	f7ff fd10 	bl	8005026 <_PreparePacket>
 8005606:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	633b      	str	r3, [r7, #48]	; 0x30
 8005614:	e00b      	b.n	800562e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	b2da      	uxtb	r2, r3
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	1c59      	adds	r1, r3, #1
 800561e:	6379      	str	r1, [r7, #52]	; 0x34
 8005620:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	09db      	lsrs	r3, r3, #7
 800562c:	633b      	str	r3, [r7, #48]	; 0x30
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	2b7f      	cmp	r3, #127	; 0x7f
 8005632:	d8f0      	bhi.n	8005616 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	637a      	str	r2, [r7, #52]	; 0x34
 800563a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
 800564c:	e00b      	b.n	8005666 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	b2da      	uxtb	r2, r3
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	09db      	lsrs	r3, r3, #7
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	2b7f      	cmp	r3, #127	; 0x7f
 800566a:	d8f0      	bhi.n	800564e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	e00b      	b.n	800569e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	6279      	str	r1, [r7, #36]	; 0x24
 8005690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	09db      	lsrs	r3, r3, #7
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2b7f      	cmp	r3, #127	; 0x7f
 80056a2:	d8f0      	bhi.n	8005686 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	627a      	str	r2, [r7, #36]	; 0x24
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	69b8      	ldr	r0, [r7, #24]
 80056ba:	f7ff fda5 	bl	8005208 <_SendPacket>
  RECORD_END();
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f383 8811 	msr	BASEPRI, r3
}
 80056c4:	bf00      	nop
 80056c6:	3738      	adds	r7, #56	; 0x38
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	2001441c 	.word	0x2001441c

080056d0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b090      	sub	sp, #64	; 0x40
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056de:	f3ef 8311 	mrs	r3, BASEPRI
 80056e2:	f04f 0120 	mov.w	r1, #32
 80056e6:	f381 8811 	msr	BASEPRI, r1
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	4840      	ldr	r0, [pc, #256]	; (80057f0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80056ee:	f7ff fc9a 	bl	8005026 <_PreparePacket>
 80056f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005700:	e00b      	b.n	800571a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	b2da      	uxtb	r2, r3
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800570c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	63bb      	str	r3, [r7, #56]	; 0x38
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	2b7f      	cmp	r3, #127	; 0x7f
 800571e:	d8f0      	bhi.n	8005702 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
 8005738:	e00b      	b.n	8005752 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	1c59      	adds	r1, r3, #1
 8005742:	6379      	str	r1, [r7, #52]	; 0x34
 8005744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	09db      	lsrs	r3, r3, #7
 8005750:	633b      	str	r3, [r7, #48]	; 0x30
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	2b7f      	cmp	r3, #127	; 0x7f
 8005756:	d8f0      	bhi.n	800573a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	637a      	str	r2, [r7, #52]	; 0x34
 800575e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005770:	e00b      	b.n	800578a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	b2da      	uxtb	r2, r3
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800577c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	09db      	lsrs	r3, r3, #7
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	2b7f      	cmp	r3, #127	; 0x7f
 800578e:	d8f0      	bhi.n	8005772 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
 80057a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	e00b      	b.n	80057c2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	1c59      	adds	r1, r3, #1
 80057b2:	6279      	str	r1, [r7, #36]	; 0x24
 80057b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	09db      	lsrs	r3, r3, #7
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	2b7f      	cmp	r3, #127	; 0x7f
 80057c6:	d8f0      	bhi.n	80057aa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	627a      	str	r2, [r7, #36]	; 0x24
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	69b8      	ldr	r0, [r7, #24]
 80057de:	f7ff fd13 	bl	8005208 <_SendPacket>
  RECORD_END();
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f383 8811 	msr	BASEPRI, r3
}
 80057e8:	bf00      	nop
 80057ea:	3740      	adds	r7, #64	; 0x40
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2001441c 	.word	0x2001441c

080057f4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08c      	sub	sp, #48	; 0x30
 80057f8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80057fa:	4b58      	ldr	r3, [pc, #352]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005800:	f3ef 8311 	mrs	r3, BASEPRI
 8005804:	f04f 0120 	mov.w	r1, #32
 8005808:	f381 8811 	msr	BASEPRI, r1
 800580c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800580e:	4b53      	ldr	r3, [pc, #332]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	220a      	movs	r2, #10
 8005814:	4952      	ldr	r1, [pc, #328]	; (8005960 <SEGGER_SYSVIEW_Start+0x16c>)
 8005816:	4618      	mov	r0, r3
 8005818:	f7fa fcda 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005822:	200a      	movs	r0, #10
 8005824:	f7ff fe2a 	bl	800547c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005828:	f3ef 8311 	mrs	r3, BASEPRI
 800582c:	f04f 0120 	mov.w	r1, #32
 8005830:	f381 8811 	msr	BASEPRI, r1
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	484b      	ldr	r0, [pc, #300]	; (8005964 <SEGGER_SYSVIEW_Start+0x170>)
 8005838:	f7ff fbf5 	bl	8005026 <_PreparePacket>
 800583c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	4b45      	ldr	r3, [pc, #276]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	e00b      	b.n	8005866 <SEGGER_SYSVIEW_Start+0x72>
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	09db      	lsrs	r3, r3, #7
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	2b7f      	cmp	r3, #127	; 0x7f
 800586a:	d8f0      	bhi.n	800584e <SEGGER_SYSVIEW_Start+0x5a>
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
 8005880:	4b36      	ldr	r3, [pc, #216]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	623b      	str	r3, [r7, #32]
 8005886:	e00b      	b.n	80058a0 <SEGGER_SYSVIEW_Start+0xac>
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	b2da      	uxtb	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	6279      	str	r1, [r7, #36]	; 0x24
 8005892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	09db      	lsrs	r3, r3, #7
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	2b7f      	cmp	r3, #127	; 0x7f
 80058a4:	d8f0      	bhi.n	8005888 <SEGGER_SYSVIEW_Start+0x94>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	627a      	str	r2, [r7, #36]	; 0x24
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	4b28      	ldr	r3, [pc, #160]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	e00b      	b.n	80058da <SEGGER_SYSVIEW_Start+0xe6>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	61f9      	str	r1, [r7, #28]
 80058cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b7f      	cmp	r3, #127	; 0x7f
 80058de:	d8f0      	bhi.n	80058c2 <SEGGER_SYSVIEW_Start+0xce>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	e00b      	b.n	8005912 <SEGGER_SYSVIEW_Start+0x11e>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1c59      	adds	r1, r3, #1
 8005902:	6179      	str	r1, [r7, #20]
 8005904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	09db      	lsrs	r3, r3, #7
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b7f      	cmp	r3, #127	; 0x7f
 8005916:	d8f0      	bhi.n	80058fa <SEGGER_SYSVIEW_Start+0x106>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	617a      	str	r2, [r7, #20]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005928:	2218      	movs	r2, #24
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fc6b 	bl	8005208 <_SendPacket>
      RECORD_END();
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005938:	4b08      	ldr	r3, [pc, #32]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <SEGGER_SYSVIEW_Start+0x168>)
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005946:	f000 f9eb 	bl	8005d20 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800594a:	f000 f9b1 	bl	8005cb0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800594e:	f000 fc83 	bl	8006258 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005952:	bf00      	nop
 8005954:	3730      	adds	r7, #48	; 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200143ec 	.word	0x200143ec
 8005960:	08006f94 	.word	0x08006f94
 8005964:	2001441c 	.word	0x2001441c

08005968 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800596e:	f3ef 8311 	mrs	r3, BASEPRI
 8005972:	f04f 0120 	mov.w	r1, #32
 8005976:	f381 8811 	msr	BASEPRI, r1
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	480b      	ldr	r0, [pc, #44]	; (80059ac <SEGGER_SYSVIEW_Stop+0x44>)
 800597e:	f7ff fb52 	bl	8005026 <_PreparePacket>
 8005982:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800598c:	220b      	movs	r2, #11
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6838      	ldr	r0, [r7, #0]
 8005992:	f7ff fc39 	bl	8005208 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f383 8811 	msr	BASEPRI, r3
}
 80059a2:	bf00      	nop
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	2001441c 	.word	0x2001441c
 80059b0:	200143ec 	.word	0x200143ec

080059b4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059ba:	f3ef 8311 	mrs	r3, BASEPRI
 80059be:	f04f 0120 	mov.w	r1, #32
 80059c2:	f381 8811 	msr	BASEPRI, r1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	4845      	ldr	r0, [pc, #276]	; (8005ae0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059ca:	f7ff fb2c 	bl	8005026 <_PreparePacket>
 80059ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d8:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059de:	e00b      	b.n	80059f8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	09db      	lsrs	r3, r3, #7
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	2b7f      	cmp	r3, #127	; 0x7f
 80059fc:	d8f0      	bhi.n	80059e0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
 8005a12:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	e00b      	b.n	8005a32 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	6279      	str	r1, [r7, #36]	; 0x24
 8005a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	09db      	lsrs	r3, r3, #7
 8005a30:	623b      	str	r3, [r7, #32]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2b7f      	cmp	r3, #127	; 0x7f
 8005a36:	d8f0      	bhi.n	8005a1a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	e00b      	b.n	8005a6c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	61f9      	str	r1, [r7, #28]
 8005a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	09db      	lsrs	r3, r3, #7
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a70:	d8f0      	bhi.n	8005a54 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	61fa      	str	r2, [r7, #28]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	e00b      	b.n	8005aa4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1c59      	adds	r1, r3, #1
 8005a94:	6179      	str	r1, [r7, #20]
 8005a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	09db      	lsrs	r3, r3, #7
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa8:	d8f0      	bhi.n	8005a8c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	617a      	str	r2, [r7, #20]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005aba:	2218      	movs	r2, #24
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	68b8      	ldr	r0, [r7, #8]
 8005ac0:	f7ff fba2 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	4798      	blx	r3
  }
}
 8005ad8:	bf00      	nop
 8005ada:	3730      	adds	r7, #48	; 0x30
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	2001441c 	.word	0x2001441c
 8005ae4:	200143ec 	.word	0x200143ec

08005ae8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b092      	sub	sp, #72	; 0x48
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005af0:	f3ef 8311 	mrs	r3, BASEPRI
 8005af4:	f04f 0120 	mov.w	r1, #32
 8005af8:	f381 8811 	msr	BASEPRI, r1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	486a      	ldr	r0, [pc, #424]	; (8005ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b00:	f7ff fa91 	bl	8005026 <_PreparePacket>
 8005b04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b66      	ldr	r3, [pc, #408]	; (8005cac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1a:	e00b      	b.n	8005b34 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b22:	1c59      	adds	r1, r3, #1
 8005b24:	6479      	str	r1, [r7, #68]	; 0x44
 8005b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b30:	09db      	lsrs	r3, r3, #7
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d8f0      	bhi.n	8005b1c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b54:	e00b      	b.n	8005b6e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	09db      	lsrs	r3, r3, #7
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2b7f      	cmp	r3, #127	; 0x7f
 8005b72:	d8f0      	bhi.n	8005b56 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b82:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff f9fd 	bl	8004f8c <_EncodeStr>
 8005b92:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b94:	2209      	movs	r2, #9
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6938      	ldr	r0, [r7, #16]
 8005b9a:	f7ff fb35 	bl	8005208 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b40      	ldr	r3, [pc, #256]	; (8005cac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb2:	e00b      	b.n	8005bcc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	6379      	str	r1, [r7, #52]	; 0x34
 8005bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	633b      	str	r3, [r7, #48]	; 0x30
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd0:	d8f0      	bhi.n	8005bb4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	637a      	str	r2, [r7, #52]	; 0x34
 8005bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bec:	e00b      	b.n	8005c06 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	1c59      	adds	r1, r3, #1
 8005bf6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	09db      	lsrs	r3, r3, #7
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0a:	d8f0      	bhi.n	8005bee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	e00b      	b.n	8005c40 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	6279      	str	r1, [r7, #36]	; 0x24
 8005c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	623b      	str	r3, [r7, #32]
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	2b7f      	cmp	r3, #127	; 0x7f
 8005c44:	d8f0      	bhi.n	8005c28 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e00b      	b.n	8005c78 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	61f9      	str	r1, [r7, #28]
 8005c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	09db      	lsrs	r3, r3, #7
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7c:	d8f0      	bhi.n	8005c60 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	61fa      	str	r2, [r7, #28]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c8e:	2215      	movs	r2, #21
 8005c90:	68f9      	ldr	r1, [r7, #12]
 8005c92:	6938      	ldr	r0, [r7, #16]
 8005c94:	f7ff fab8 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f383 8811 	msr	BASEPRI, r3
}
 8005c9e:	bf00      	nop
 8005ca0:	3748      	adds	r7, #72	; 0x48
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2001441c 	.word	0x2001441c
 8005cac:	200143ec 	.word	0x200143ec

08005cb0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4798      	blx	r3
  }
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200143ec 	.word	0x200143ec

08005cd8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce4:	f04f 0120 	mov.w	r1, #32
 8005ce8:	f381 8811 	msr	BASEPRI, r1
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	480b      	ldr	r0, [pc, #44]	; (8005d1c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005cf0:	f7ff f999 	bl	8005026 <_PreparePacket>
 8005cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	6938      	ldr	r0, [r7, #16]
 8005cfc:	f7ff f946 	bl	8004f8c <_EncodeStr>
 8005d00:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005d02:	220e      	movs	r2, #14
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	6938      	ldr	r0, [r7, #16]
 8005d08:	f7ff fa7e 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f383 8811 	msr	BASEPRI, r3
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2001441c 	.word	0x2001441c

08005d20 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01a      	beq.n	8005d64 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4798      	blx	r3
 8005d40:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d44:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	000a      	movs	r2, r1
 8005d54:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d56:	4613      	mov	r3, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	200d      	movs	r0, #13
 8005d5e:	f7ff fbe7 	bl	8005530 <SEGGER_SYSVIEW_RecordU32x2>
 8005d62:	e006      	b.n	8005d72 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	200c      	movs	r0, #12
 8005d6c:	f7ff fba4 	bl	80054b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd90      	pop	{r4, r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200143ec 	.word	0x200143ec
 8005d80:	e0001004 	.word	0xe0001004

08005d84 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8e:	f04f 0120 	mov.w	r1, #32
 8005d92:	f381 8811 	msr	BASEPRI, r1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	4819      	ldr	r0, [pc, #100]	; (8005e00 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d9a:	f7ff f944 	bl	8005026 <_PreparePacket>
 8005d9e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dac:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	e00b      	b.n	8005dd0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	6179      	str	r1, [r7, #20]
 8005dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	09db      	lsrs	r3, r3, #7
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd4:	d8f0      	bhi.n	8005db8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	617a      	str	r2, [r7, #20]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005de6:	2202      	movs	r2, #2
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	68b8      	ldr	r0, [r7, #8]
 8005dec:	f7ff fa0c 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f383 8811 	msr	BASEPRI, r3
}
 8005df6:	bf00      	nop
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2001441c 	.word	0x2001441c
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e12:	f04f 0120 	mov.w	r1, #32
 8005e16:	f381 8811 	msr	BASEPRI, r1
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	4807      	ldr	r0, [pc, #28]	; (8005e3c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e1e:	f7ff f902 	bl	8005026 <_PreparePacket>
 8005e22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e24:	2203      	movs	r2, #3
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6838      	ldr	r0, [r7, #0]
 8005e2a:	f7ff f9ed 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f383 8811 	msr	BASEPRI, r3
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2001441c 	.word	0x2001441c

08005e40 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e46:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4a:	f04f 0120 	mov.w	r1, #32
 8005e4e:	f381 8811 	msr	BASEPRI, r1
 8005e52:	607b      	str	r3, [r7, #4]
 8005e54:	4807      	ldr	r0, [pc, #28]	; (8005e74 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e56:	f7ff f8e6 	bl	8005026 <_PreparePacket>
 8005e5a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e5c:	2212      	movs	r2, #18
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f7ff f9d1 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f383 8811 	msr	BASEPRI, r3
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	2001441c 	.word	0x2001441c

08005e78 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e82:	f04f 0120 	mov.w	r1, #32
 8005e86:	f381 8811 	msr	BASEPRI, r1
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	4807      	ldr	r0, [pc, #28]	; (8005eac <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e8e:	f7ff f8ca 	bl	8005026 <_PreparePacket>
 8005e92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e94:	2211      	movs	r2, #17
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6838      	ldr	r0, [r7, #0]
 8005e9a:	f7ff f9b5 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f383 8811 	msr	BASEPRI, r3
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	2001441c 	.word	0x2001441c

08005eb0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebc:	f04f 0120 	mov.w	r1, #32
 8005ec0:	f381 8811 	msr	BASEPRI, r1
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	4819      	ldr	r0, [pc, #100]	; (8005f2c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ec8:	f7ff f8ad 	bl	8005026 <_PreparePacket>
 8005ecc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e00b      	b.n	8005efe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	61f9      	str	r1, [r7, #28]
 8005ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b7f      	cmp	r3, #127	; 0x7f
 8005f02:	d8f0      	bhi.n	8005ee6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	61fa      	str	r2, [r7, #28]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f14:	2208      	movs	r2, #8
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6938      	ldr	r0, [r7, #16]
 8005f1a:	f7ff f975 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f383 8811 	msr	BASEPRI, r3
}
 8005f24:	bf00      	nop
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	2001441c 	.word	0x2001441c
 8005f30:	200143ec 	.word	0x200143ec

08005f34 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f40:	f04f 0120 	mov.w	r1, #32
 8005f44:	f381 8811 	msr	BASEPRI, r1
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	4819      	ldr	r0, [pc, #100]	; (8005fb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f4c:	f7ff f86b 	bl	8005026 <_PreparePacket>
 8005f50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	e00b      	b.n	8005f82 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	1c59      	adds	r1, r3, #1
 8005f72:	61f9      	str	r1, [r7, #28]
 8005f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	09db      	lsrs	r3, r3, #7
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b7f      	cmp	r3, #127	; 0x7f
 8005f86:	d8f0      	bhi.n	8005f6a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	61fa      	str	r2, [r7, #28]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f98:	2204      	movs	r2, #4
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6938      	ldr	r0, [r7, #16]
 8005f9e:	f7ff f933 	bl	8005208 <_SendPacket>
  RECORD_END();
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f383 8811 	msr	BASEPRI, r3
}
 8005fa8:	bf00      	nop
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	2001441c 	.word	0x2001441c
 8005fb4:	200143ec 	.word	0x200143ec

08005fb8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc4:	f04f 0120 	mov.w	r1, #32
 8005fc8:	f381 8811 	msr	BASEPRI, r1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	4819      	ldr	r0, [pc, #100]	; (8006034 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005fd0:	f7ff f829 	bl	8005026 <_PreparePacket>
 8005fd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e00b      	b.n	8006006 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	61f9      	str	r1, [r7, #28]
 8005ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	09db      	lsrs	r3, r3, #7
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b7f      	cmp	r3, #127	; 0x7f
 800600a:	d8f0      	bhi.n	8005fee <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	61fa      	str	r2, [r7, #28]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800601c:	2206      	movs	r2, #6
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f7ff f8f1 	bl	8005208 <_SendPacket>
  RECORD_END();
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f383 8811 	msr	BASEPRI, r3
}
 800602c:	bf00      	nop
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	2001441c 	.word	0x2001441c
 8006038:	200143ec 	.word	0x200143ec

0800603c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006046:	f3ef 8311 	mrs	r3, BASEPRI
 800604a:	f04f 0120 	mov.w	r1, #32
 800604e:	f381 8811 	msr	BASEPRI, r1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	4827      	ldr	r0, [pc, #156]	; (80060f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006056:	f7fe ffe6 	bl	8005026 <_PreparePacket>
 800605a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	e00b      	b.n	800608c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	6279      	str	r1, [r7, #36]	; 0x24
 800607e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	2b7f      	cmp	r3, #127	; 0x7f
 8006090:	d8f0      	bhi.n	8006074 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	627a      	str	r2, [r7, #36]	; 0x24
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e00b      	b.n	80060c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	61f9      	str	r1, [r7, #28]
 80060b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b7f      	cmp	r3, #127	; 0x7f
 80060c8:	d8f0      	bhi.n	80060ac <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	61fa      	str	r2, [r7, #28]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80060da:	2207      	movs	r2, #7
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	6938      	ldr	r0, [r7, #16]
 80060e0:	f7ff f892 	bl	8005208 <_SendPacket>
  RECORD_END();
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f383 8811 	msr	BASEPRI, r3
}
 80060ea:	bf00      	nop
 80060ec:	3728      	adds	r7, #40	; 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	2001441c 	.word	0x2001441c
 80060f8:	200143ec 	.word	0x200143ec

080060fc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006104:	4b04      	ldr	r3, [pc, #16]	; (8006118 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	1ad3      	subs	r3, r2, r3
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	200143ec 	.word	0x200143ec

0800611c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	; 0x30
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006126:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d06d      	beq.n	800620a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800612e:	4b39      	ldr	r3, [pc, #228]	; (8006214 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006134:	2300      	movs	r3, #0
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
 8006138:	e008      	b.n	800614c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	3301      	adds	r3, #1
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006150:	429a      	cmp	r2, r3
 8006152:	d3f2      	bcc.n	800613a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006154:	e000      	b.n	8006158 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006156:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d055      	beq.n	800620a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800615e:	f3ef 8311 	mrs	r3, BASEPRI
 8006162:	f04f 0120 	mov.w	r1, #32
 8006166:	f381 8811 	msr	BASEPRI, r1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	482a      	ldr	r0, [pc, #168]	; (8006218 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800616e:	f7fe ff5a 	bl	8005026 <_PreparePacket>
 8006172:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	e00b      	b.n	800619a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	6279      	str	r1, [r7, #36]	; 0x24
 800618c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	09db      	lsrs	r3, r3, #7
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	2b7f      	cmp	r3, #127	; 0x7f
 800619e:	d8f0      	bhi.n	8006182 <SEGGER_SYSVIEW_SendModule+0x66>
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	627a      	str	r2, [r7, #36]	; 0x24
 80061a6:	6a3a      	ldr	r2, [r7, #32]
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e00b      	b.n	80061d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	61f9      	str	r1, [r7, #28]
 80061c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d8f0      	bhi.n	80061bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	61fa      	str	r2, [r7, #28]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	4619      	mov	r1, r3
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7fe feca 	bl	8004f8c <_EncodeStr>
 80061f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80061fa:	2216      	movs	r2, #22
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	6938      	ldr	r0, [r7, #16]
 8006200:	f7ff f802 	bl	8005208 <_SendPacket>
      RECORD_END();
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3730      	adds	r7, #48	; 0x30
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20014414 	.word	0x20014414
 8006218:	2001441c 	.word	0x2001441c

0800621c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f2      	bne.n	8006230 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20014414 	.word	0x20014414

08006258 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800625e:	f3ef 8311 	mrs	r3, BASEPRI
 8006262:	f04f 0120 	mov.w	r1, #32
 8006266:	f381 8811 	msr	BASEPRI, r1
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	4817      	ldr	r0, [pc, #92]	; (80062cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800626e:	f7fe feda 	bl	8005026 <_PreparePacket>
 8006272:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	e00b      	b.n	800629c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	6179      	str	r1, [r7, #20]
 800628e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	09db      	lsrs	r3, r3, #7
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b7f      	cmp	r3, #127	; 0x7f
 80062a0:	d8f0      	bhi.n	8006284 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	617a      	str	r2, [r7, #20]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80062b2:	221b      	movs	r2, #27
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	68b8      	ldr	r0, [r7, #8]
 80062b8:	f7fe ffa6 	bl	8005208 <_SendPacket>
  RECORD_END();
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f383 8811 	msr	BASEPRI, r3
}
 80062c2:	bf00      	nop
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2001441c 	.word	0x2001441c
 80062d0:	20014418 	.word	0x20014418

080062d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062dc:	f3ef 8311 	mrs	r3, BASEPRI
 80062e0:	f04f 0120 	mov.w	r1, #32
 80062e4:	f381 8811 	msr	BASEPRI, r1
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	4827      	ldr	r0, [pc, #156]	; (8006388 <SEGGER_SYSVIEW_Warn+0xb4>)
 80062ec:	f7fe fe9b 	bl	8005026 <_PreparePacket>
 80062f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062f2:	2280      	movs	r2, #128	; 0x80
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	6938      	ldr	r0, [r7, #16]
 80062f8:	f7fe fe48 	bl	8004f8c <_EncodeStr>
 80062fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	2301      	movs	r3, #1
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_Warn+0x4c>
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	6279      	str	r1, [r7, #36]	; 0x24
 8006312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	623b      	str	r3, [r7, #32]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_Warn+0x34>
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	627a      	str	r2, [r7, #36]	; 0x24
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	2300      	movs	r3, #0
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e00b      	b.n	8006358 <SEGGER_SYSVIEW_Warn+0x84>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	61f9      	str	r1, [r7, #28]
 800634a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b7f      	cmp	r3, #127	; 0x7f
 800635c:	d8f0      	bhi.n	8006340 <SEGGER_SYSVIEW_Warn+0x6c>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	61fa      	str	r2, [r7, #28]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800636e:	221a      	movs	r2, #26
 8006370:	68f9      	ldr	r1, [r7, #12]
 8006372:	6938      	ldr	r0, [r7, #16]
 8006374:	f7fe ff48 	bl	8005208 <_SendPacket>
  RECORD_END();
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2001441c 	.word	0x2001441c

0800638c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	2000      	movs	r0, #0
 80063a0:	f7fe fcda 	bl	8004d58 <SEGGER_RTT_Write>
  return len;
 80063a4:	683b      	ldr	r3, [r7, #0]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <__libc_init_array>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4d0d      	ldr	r5, [pc, #52]	; (80063e8 <__libc_init_array+0x38>)
 80063b4:	4c0d      	ldr	r4, [pc, #52]	; (80063ec <__libc_init_array+0x3c>)
 80063b6:	1b64      	subs	r4, r4, r5
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	2600      	movs	r6, #0
 80063bc:	42a6      	cmp	r6, r4
 80063be:	d109      	bne.n	80063d4 <__libc_init_array+0x24>
 80063c0:	4d0b      	ldr	r5, [pc, #44]	; (80063f0 <__libc_init_array+0x40>)
 80063c2:	4c0c      	ldr	r4, [pc, #48]	; (80063f4 <__libc_init_array+0x44>)
 80063c4:	f000 fd38 	bl	8006e38 <_init>
 80063c8:	1b64      	subs	r4, r4, r5
 80063ca:	10a4      	asrs	r4, r4, #2
 80063cc:	2600      	movs	r6, #0
 80063ce:	42a6      	cmp	r6, r4
 80063d0:	d105      	bne.n	80063de <__libc_init_array+0x2e>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d8:	4798      	blx	r3
 80063da:	3601      	adds	r6, #1
 80063dc:	e7ee      	b.n	80063bc <__libc_init_array+0xc>
 80063de:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e2:	4798      	blx	r3
 80063e4:	3601      	adds	r6, #1
 80063e6:	e7f2      	b.n	80063ce <__libc_init_array+0x1e>
 80063e8:	0800700c 	.word	0x0800700c
 80063ec:	0800700c 	.word	0x0800700c
 80063f0:	0800700c 	.word	0x0800700c
 80063f4:	08007010 	.word	0x08007010

080063f8 <memcmp>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	3901      	subs	r1, #1
 80063fc:	4402      	add	r2, r0
 80063fe:	4290      	cmp	r0, r2
 8006400:	d101      	bne.n	8006406 <memcmp+0xe>
 8006402:	2000      	movs	r0, #0
 8006404:	e005      	b.n	8006412 <memcmp+0x1a>
 8006406:	7803      	ldrb	r3, [r0, #0]
 8006408:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800640c:	42a3      	cmp	r3, r4
 800640e:	d001      	beq.n	8006414 <memcmp+0x1c>
 8006410:	1b18      	subs	r0, r3, r4
 8006412:	bd10      	pop	{r4, pc}
 8006414:	3001      	adds	r0, #1
 8006416:	e7f2      	b.n	80063fe <memcmp+0x6>

08006418 <memcpy>:
 8006418:	440a      	add	r2, r1
 800641a:	4291      	cmp	r1, r2
 800641c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006420:	d100      	bne.n	8006424 <memcpy+0xc>
 8006422:	4770      	bx	lr
 8006424:	b510      	push	{r4, lr}
 8006426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800642a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642e:	4291      	cmp	r1, r2
 8006430:	d1f9      	bne.n	8006426 <memcpy+0xe>
 8006432:	bd10      	pop	{r4, pc}

08006434 <memset>:
 8006434:	4402      	add	r2, r0
 8006436:	4603      	mov	r3, r0
 8006438:	4293      	cmp	r3, r2
 800643a:	d100      	bne.n	800643e <memset+0xa>
 800643c:	4770      	bx	lr
 800643e:	f803 1b01 	strb.w	r1, [r3], #1
 8006442:	e7f9      	b.n	8006438 <memset+0x4>

08006444 <_puts_r>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	460e      	mov	r6, r1
 8006448:	4605      	mov	r5, r0
 800644a:	b118      	cbz	r0, 8006454 <_puts_r+0x10>
 800644c:	6983      	ldr	r3, [r0, #24]
 800644e:	b90b      	cbnz	r3, 8006454 <_puts_r+0x10>
 8006450:	f000 fa48 	bl	80068e4 <__sinit>
 8006454:	69ab      	ldr	r3, [r5, #24]
 8006456:	68ac      	ldr	r4, [r5, #8]
 8006458:	b913      	cbnz	r3, 8006460 <_puts_r+0x1c>
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fa42 	bl	80068e4 <__sinit>
 8006460:	4b2c      	ldr	r3, [pc, #176]	; (8006514 <_puts_r+0xd0>)
 8006462:	429c      	cmp	r4, r3
 8006464:	d120      	bne.n	80064a8 <_puts_r+0x64>
 8006466:	686c      	ldr	r4, [r5, #4]
 8006468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800646a:	07db      	lsls	r3, r3, #31
 800646c:	d405      	bmi.n	800647a <_puts_r+0x36>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	0598      	lsls	r0, r3, #22
 8006472:	d402      	bmi.n	800647a <_puts_r+0x36>
 8006474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006476:	f000 fad3 	bl	8006a20 <__retarget_lock_acquire_recursive>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	0719      	lsls	r1, r3, #28
 800647e:	d51d      	bpl.n	80064bc <_puts_r+0x78>
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	b1db      	cbz	r3, 80064bc <_puts_r+0x78>
 8006484:	3e01      	subs	r6, #1
 8006486:	68a3      	ldr	r3, [r4, #8]
 8006488:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800648c:	3b01      	subs	r3, #1
 800648e:	60a3      	str	r3, [r4, #8]
 8006490:	bb39      	cbnz	r1, 80064e2 <_puts_r+0x9e>
 8006492:	2b00      	cmp	r3, #0
 8006494:	da38      	bge.n	8006508 <_puts_r+0xc4>
 8006496:	4622      	mov	r2, r4
 8006498:	210a      	movs	r1, #10
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f848 	bl	8006530 <__swbuf_r>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d011      	beq.n	80064c8 <_puts_r+0x84>
 80064a4:	250a      	movs	r5, #10
 80064a6:	e011      	b.n	80064cc <_puts_r+0x88>
 80064a8:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <_puts_r+0xd4>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d101      	bne.n	80064b2 <_puts_r+0x6e>
 80064ae:	68ac      	ldr	r4, [r5, #8]
 80064b0:	e7da      	b.n	8006468 <_puts_r+0x24>
 80064b2:	4b1a      	ldr	r3, [pc, #104]	; (800651c <_puts_r+0xd8>)
 80064b4:	429c      	cmp	r4, r3
 80064b6:	bf08      	it	eq
 80064b8:	68ec      	ldreq	r4, [r5, #12]
 80064ba:	e7d5      	b.n	8006468 <_puts_r+0x24>
 80064bc:	4621      	mov	r1, r4
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f888 	bl	80065d4 <__swsetup_r>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d0dd      	beq.n	8006484 <_puts_r+0x40>
 80064c8:	f04f 35ff 	mov.w	r5, #4294967295
 80064cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ce:	07da      	lsls	r2, r3, #31
 80064d0:	d405      	bmi.n	80064de <_puts_r+0x9a>
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	059b      	lsls	r3, r3, #22
 80064d6:	d402      	bmi.n	80064de <_puts_r+0x9a>
 80064d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064da:	f000 faa2 	bl	8006a22 <__retarget_lock_release_recursive>
 80064de:	4628      	mov	r0, r5
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da04      	bge.n	80064f0 <_puts_r+0xac>
 80064e6:	69a2      	ldr	r2, [r4, #24]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	dc06      	bgt.n	80064fa <_puts_r+0xb6>
 80064ec:	290a      	cmp	r1, #10
 80064ee:	d004      	beq.n	80064fa <_puts_r+0xb6>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	6022      	str	r2, [r4, #0]
 80064f6:	7019      	strb	r1, [r3, #0]
 80064f8:	e7c5      	b.n	8006486 <_puts_r+0x42>
 80064fa:	4622      	mov	r2, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 f817 	bl	8006530 <__swbuf_r>
 8006502:	3001      	adds	r0, #1
 8006504:	d1bf      	bne.n	8006486 <_puts_r+0x42>
 8006506:	e7df      	b.n	80064c8 <_puts_r+0x84>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	250a      	movs	r5, #10
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	6022      	str	r2, [r4, #0]
 8006510:	701d      	strb	r5, [r3, #0]
 8006512:	e7db      	b.n	80064cc <_puts_r+0x88>
 8006514:	08006fc4 	.word	0x08006fc4
 8006518:	08006fe4 	.word	0x08006fe4
 800651c:	08006fa4 	.word	0x08006fa4

08006520 <puts>:
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <puts+0xc>)
 8006522:	4601      	mov	r1, r0
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	f7ff bf8d 	b.w	8006444 <_puts_r>
 800652a:	bf00      	nop
 800652c:	20000014 	.word	0x20000014

08006530 <__swbuf_r>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	460e      	mov	r6, r1
 8006534:	4614      	mov	r4, r2
 8006536:	4605      	mov	r5, r0
 8006538:	b118      	cbz	r0, 8006542 <__swbuf_r+0x12>
 800653a:	6983      	ldr	r3, [r0, #24]
 800653c:	b90b      	cbnz	r3, 8006542 <__swbuf_r+0x12>
 800653e:	f000 f9d1 	bl	80068e4 <__sinit>
 8006542:	4b21      	ldr	r3, [pc, #132]	; (80065c8 <__swbuf_r+0x98>)
 8006544:	429c      	cmp	r4, r3
 8006546:	d12b      	bne.n	80065a0 <__swbuf_r+0x70>
 8006548:	686c      	ldr	r4, [r5, #4]
 800654a:	69a3      	ldr	r3, [r4, #24]
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	071a      	lsls	r2, r3, #28
 8006552:	d52f      	bpl.n	80065b4 <__swbuf_r+0x84>
 8006554:	6923      	ldr	r3, [r4, #16]
 8006556:	b36b      	cbz	r3, 80065b4 <__swbuf_r+0x84>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	6820      	ldr	r0, [r4, #0]
 800655c:	1ac0      	subs	r0, r0, r3
 800655e:	6963      	ldr	r3, [r4, #20]
 8006560:	b2f6      	uxtb	r6, r6
 8006562:	4283      	cmp	r3, r0
 8006564:	4637      	mov	r7, r6
 8006566:	dc04      	bgt.n	8006572 <__swbuf_r+0x42>
 8006568:	4621      	mov	r1, r4
 800656a:	4628      	mov	r0, r5
 800656c:	f000 f926 	bl	80067bc <_fflush_r>
 8006570:	bb30      	cbnz	r0, 80065c0 <__swbuf_r+0x90>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	3b01      	subs	r3, #1
 8006576:	60a3      	str	r3, [r4, #8]
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	701e      	strb	r6, [r3, #0]
 8006580:	6963      	ldr	r3, [r4, #20]
 8006582:	3001      	adds	r0, #1
 8006584:	4283      	cmp	r3, r0
 8006586:	d004      	beq.n	8006592 <__swbuf_r+0x62>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	07db      	lsls	r3, r3, #31
 800658c:	d506      	bpl.n	800659c <__swbuf_r+0x6c>
 800658e:	2e0a      	cmp	r6, #10
 8006590:	d104      	bne.n	800659c <__swbuf_r+0x6c>
 8006592:	4621      	mov	r1, r4
 8006594:	4628      	mov	r0, r5
 8006596:	f000 f911 	bl	80067bc <_fflush_r>
 800659a:	b988      	cbnz	r0, 80065c0 <__swbuf_r+0x90>
 800659c:	4638      	mov	r0, r7
 800659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <__swbuf_r+0x9c>)
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d101      	bne.n	80065aa <__swbuf_r+0x7a>
 80065a6:	68ac      	ldr	r4, [r5, #8]
 80065a8:	e7cf      	b.n	800654a <__swbuf_r+0x1a>
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <__swbuf_r+0xa0>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	bf08      	it	eq
 80065b0:	68ec      	ldreq	r4, [r5, #12]
 80065b2:	e7ca      	b.n	800654a <__swbuf_r+0x1a>
 80065b4:	4621      	mov	r1, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 f80c 	bl	80065d4 <__swsetup_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d0cb      	beq.n	8006558 <__swbuf_r+0x28>
 80065c0:	f04f 37ff 	mov.w	r7, #4294967295
 80065c4:	e7ea      	b.n	800659c <__swbuf_r+0x6c>
 80065c6:	bf00      	nop
 80065c8:	08006fc4 	.word	0x08006fc4
 80065cc:	08006fe4 	.word	0x08006fe4
 80065d0:	08006fa4 	.word	0x08006fa4

080065d4 <__swsetup_r>:
 80065d4:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <__swsetup_r+0xcc>)
 80065d6:	b570      	push	{r4, r5, r6, lr}
 80065d8:	681d      	ldr	r5, [r3, #0]
 80065da:	4606      	mov	r6, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	b125      	cbz	r5, 80065ea <__swsetup_r+0x16>
 80065e0:	69ab      	ldr	r3, [r5, #24]
 80065e2:	b913      	cbnz	r3, 80065ea <__swsetup_r+0x16>
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 f97d 	bl	80068e4 <__sinit>
 80065ea:	4b2e      	ldr	r3, [pc, #184]	; (80066a4 <__swsetup_r+0xd0>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d10f      	bne.n	8006610 <__swsetup_r+0x3c>
 80065f0:	686c      	ldr	r4, [r5, #4]
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065f8:	0719      	lsls	r1, r3, #28
 80065fa:	d42c      	bmi.n	8006656 <__swsetup_r+0x82>
 80065fc:	06dd      	lsls	r5, r3, #27
 80065fe:	d411      	bmi.n	8006624 <__swsetup_r+0x50>
 8006600:	2309      	movs	r3, #9
 8006602:	6033      	str	r3, [r6, #0]
 8006604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	f04f 30ff 	mov.w	r0, #4294967295
 800660e:	e03e      	b.n	800668e <__swsetup_r+0xba>
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <__swsetup_r+0xd4>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <__swsetup_r+0x46>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7eb      	b.n	80065f2 <__swsetup_r+0x1e>
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <__swsetup_r+0xd8>)
 800661c:	429c      	cmp	r4, r3
 800661e:	bf08      	it	eq
 8006620:	68ec      	ldreq	r4, [r5, #12]
 8006622:	e7e6      	b.n	80065f2 <__swsetup_r+0x1e>
 8006624:	0758      	lsls	r0, r3, #29
 8006626:	d512      	bpl.n	800664e <__swsetup_r+0x7a>
 8006628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662a:	b141      	cbz	r1, 800663e <__swsetup_r+0x6a>
 800662c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006630:	4299      	cmp	r1, r3
 8006632:	d002      	beq.n	800663a <__swsetup_r+0x66>
 8006634:	4630      	mov	r0, r6
 8006636:	f000 fa5b 	bl	8006af0 <_free_r>
 800663a:	2300      	movs	r3, #0
 800663c:	6363      	str	r3, [r4, #52]	; 0x34
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	2300      	movs	r3, #0
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f043 0308 	orr.w	r3, r3, #8
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	b94b      	cbnz	r3, 800666e <__swsetup_r+0x9a>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d003      	beq.n	800666e <__swsetup_r+0x9a>
 8006666:	4621      	mov	r1, r4
 8006668:	4630      	mov	r0, r6
 800666a:	f000 fa01 	bl	8006a70 <__smakebuf_r>
 800666e:	89a0      	ldrh	r0, [r4, #12]
 8006670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006674:	f010 0301 	ands.w	r3, r0, #1
 8006678:	d00a      	beq.n	8006690 <__swsetup_r+0xbc>
 800667a:	2300      	movs	r3, #0
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	6963      	ldr	r3, [r4, #20]
 8006680:	425b      	negs	r3, r3
 8006682:	61a3      	str	r3, [r4, #24]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	b943      	cbnz	r3, 800669a <__swsetup_r+0xc6>
 8006688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800668c:	d1ba      	bne.n	8006604 <__swsetup_r+0x30>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	0781      	lsls	r1, r0, #30
 8006692:	bf58      	it	pl
 8006694:	6963      	ldrpl	r3, [r4, #20]
 8006696:	60a3      	str	r3, [r4, #8]
 8006698:	e7f4      	b.n	8006684 <__swsetup_r+0xb0>
 800669a:	2000      	movs	r0, #0
 800669c:	e7f7      	b.n	800668e <__swsetup_r+0xba>
 800669e:	bf00      	nop
 80066a0:	20000014 	.word	0x20000014
 80066a4:	08006fc4 	.word	0x08006fc4
 80066a8:	08006fe4 	.word	0x08006fe4
 80066ac:	08006fa4 	.word	0x08006fa4

080066b0 <__sflush_r>:
 80066b0:	898a      	ldrh	r2, [r1, #12]
 80066b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	4605      	mov	r5, r0
 80066b8:	0710      	lsls	r0, r2, #28
 80066ba:	460c      	mov	r4, r1
 80066bc:	d458      	bmi.n	8006770 <__sflush_r+0xc0>
 80066be:	684b      	ldr	r3, [r1, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	dc05      	bgt.n	80066d0 <__sflush_r+0x20>
 80066c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dc02      	bgt.n	80066d0 <__sflush_r+0x20>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	d0f9      	beq.n	80066ca <__sflush_r+0x1a>
 80066d6:	2300      	movs	r3, #0
 80066d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066dc:	682f      	ldr	r7, [r5, #0]
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	d032      	beq.n	8006748 <__sflush_r+0x98>
 80066e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	075a      	lsls	r2, r3, #29
 80066e8:	d505      	bpl.n	80066f6 <__sflush_r+0x46>
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	1ac0      	subs	r0, r0, r3
 80066ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066f0:	b10b      	cbz	r3, 80066f6 <__sflush_r+0x46>
 80066f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066f4:	1ac0      	subs	r0, r0, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	4602      	mov	r2, r0
 80066fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066fc:	6a21      	ldr	r1, [r4, #32]
 80066fe:	4628      	mov	r0, r5
 8006700:	47b0      	blx	r6
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	d106      	bne.n	8006716 <__sflush_r+0x66>
 8006708:	6829      	ldr	r1, [r5, #0]
 800670a:	291d      	cmp	r1, #29
 800670c:	d82c      	bhi.n	8006768 <__sflush_r+0xb8>
 800670e:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <__sflush_r+0x108>)
 8006710:	40ca      	lsrs	r2, r1
 8006712:	07d6      	lsls	r6, r2, #31
 8006714:	d528      	bpl.n	8006768 <__sflush_r+0xb8>
 8006716:	2200      	movs	r2, #0
 8006718:	6062      	str	r2, [r4, #4]
 800671a:	04d9      	lsls	r1, r3, #19
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	6022      	str	r2, [r4, #0]
 8006720:	d504      	bpl.n	800672c <__sflush_r+0x7c>
 8006722:	1c42      	adds	r2, r0, #1
 8006724:	d101      	bne.n	800672a <__sflush_r+0x7a>
 8006726:	682b      	ldr	r3, [r5, #0]
 8006728:	b903      	cbnz	r3, 800672c <__sflush_r+0x7c>
 800672a:	6560      	str	r0, [r4, #84]	; 0x54
 800672c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800672e:	602f      	str	r7, [r5, #0]
 8006730:	2900      	cmp	r1, #0
 8006732:	d0ca      	beq.n	80066ca <__sflush_r+0x1a>
 8006734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006738:	4299      	cmp	r1, r3
 800673a:	d002      	beq.n	8006742 <__sflush_r+0x92>
 800673c:	4628      	mov	r0, r5
 800673e:	f000 f9d7 	bl	8006af0 <_free_r>
 8006742:	2000      	movs	r0, #0
 8006744:	6360      	str	r0, [r4, #52]	; 0x34
 8006746:	e7c1      	b.n	80066cc <__sflush_r+0x1c>
 8006748:	6a21      	ldr	r1, [r4, #32]
 800674a:	2301      	movs	r3, #1
 800674c:	4628      	mov	r0, r5
 800674e:	47b0      	blx	r6
 8006750:	1c41      	adds	r1, r0, #1
 8006752:	d1c7      	bne.n	80066e4 <__sflush_r+0x34>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0c4      	beq.n	80066e4 <__sflush_r+0x34>
 800675a:	2b1d      	cmp	r3, #29
 800675c:	d001      	beq.n	8006762 <__sflush_r+0xb2>
 800675e:	2b16      	cmp	r3, #22
 8006760:	d101      	bne.n	8006766 <__sflush_r+0xb6>
 8006762:	602f      	str	r7, [r5, #0]
 8006764:	e7b1      	b.n	80066ca <__sflush_r+0x1a>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676c:	81a3      	strh	r3, [r4, #12]
 800676e:	e7ad      	b.n	80066cc <__sflush_r+0x1c>
 8006770:	690f      	ldr	r7, [r1, #16]
 8006772:	2f00      	cmp	r7, #0
 8006774:	d0a9      	beq.n	80066ca <__sflush_r+0x1a>
 8006776:	0793      	lsls	r3, r2, #30
 8006778:	680e      	ldr	r6, [r1, #0]
 800677a:	bf08      	it	eq
 800677c:	694b      	ldreq	r3, [r1, #20]
 800677e:	600f      	str	r7, [r1, #0]
 8006780:	bf18      	it	ne
 8006782:	2300      	movne	r3, #0
 8006784:	eba6 0807 	sub.w	r8, r6, r7
 8006788:	608b      	str	r3, [r1, #8]
 800678a:	f1b8 0f00 	cmp.w	r8, #0
 800678e:	dd9c      	ble.n	80066ca <__sflush_r+0x1a>
 8006790:	6a21      	ldr	r1, [r4, #32]
 8006792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006794:	4643      	mov	r3, r8
 8006796:	463a      	mov	r2, r7
 8006798:	4628      	mov	r0, r5
 800679a:	47b0      	blx	r6
 800679c:	2800      	cmp	r0, #0
 800679e:	dc06      	bgt.n	80067ae <__sflush_r+0xfe>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a6:	81a3      	strh	r3, [r4, #12]
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	e78e      	b.n	80066cc <__sflush_r+0x1c>
 80067ae:	4407      	add	r7, r0
 80067b0:	eba8 0800 	sub.w	r8, r8, r0
 80067b4:	e7e9      	b.n	800678a <__sflush_r+0xda>
 80067b6:	bf00      	nop
 80067b8:	20400001 	.word	0x20400001

080067bc <_fflush_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	690b      	ldr	r3, [r1, #16]
 80067c0:	4605      	mov	r5, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	b913      	cbnz	r3, 80067cc <_fflush_r+0x10>
 80067c6:	2500      	movs	r5, #0
 80067c8:	4628      	mov	r0, r5
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	b118      	cbz	r0, 80067d6 <_fflush_r+0x1a>
 80067ce:	6983      	ldr	r3, [r0, #24]
 80067d0:	b90b      	cbnz	r3, 80067d6 <_fflush_r+0x1a>
 80067d2:	f000 f887 	bl	80068e4 <__sinit>
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <_fflush_r+0x6c>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	d11b      	bne.n	8006814 <_fflush_r+0x58>
 80067dc:	686c      	ldr	r4, [r5, #4]
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0ef      	beq.n	80067c6 <_fflush_r+0xa>
 80067e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067e8:	07d0      	lsls	r0, r2, #31
 80067ea:	d404      	bmi.n	80067f6 <_fflush_r+0x3a>
 80067ec:	0599      	lsls	r1, r3, #22
 80067ee:	d402      	bmi.n	80067f6 <_fflush_r+0x3a>
 80067f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f2:	f000 f915 	bl	8006a20 <__retarget_lock_acquire_recursive>
 80067f6:	4628      	mov	r0, r5
 80067f8:	4621      	mov	r1, r4
 80067fa:	f7ff ff59 	bl	80066b0 <__sflush_r>
 80067fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006800:	07da      	lsls	r2, r3, #31
 8006802:	4605      	mov	r5, r0
 8006804:	d4e0      	bmi.n	80067c8 <_fflush_r+0xc>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	059b      	lsls	r3, r3, #22
 800680a:	d4dd      	bmi.n	80067c8 <_fflush_r+0xc>
 800680c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800680e:	f000 f908 	bl	8006a22 <__retarget_lock_release_recursive>
 8006812:	e7d9      	b.n	80067c8 <_fflush_r+0xc>
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <_fflush_r+0x70>)
 8006816:	429c      	cmp	r4, r3
 8006818:	d101      	bne.n	800681e <_fflush_r+0x62>
 800681a:	68ac      	ldr	r4, [r5, #8]
 800681c:	e7df      	b.n	80067de <_fflush_r+0x22>
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <_fflush_r+0x74>)
 8006820:	429c      	cmp	r4, r3
 8006822:	bf08      	it	eq
 8006824:	68ec      	ldreq	r4, [r5, #12]
 8006826:	e7da      	b.n	80067de <_fflush_r+0x22>
 8006828:	08006fc4 	.word	0x08006fc4
 800682c:	08006fe4 	.word	0x08006fe4
 8006830:	08006fa4 	.word	0x08006fa4

08006834 <std>:
 8006834:	2300      	movs	r3, #0
 8006836:	b510      	push	{r4, lr}
 8006838:	4604      	mov	r4, r0
 800683a:	e9c0 3300 	strd	r3, r3, [r0]
 800683e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006842:	6083      	str	r3, [r0, #8]
 8006844:	8181      	strh	r1, [r0, #12]
 8006846:	6643      	str	r3, [r0, #100]	; 0x64
 8006848:	81c2      	strh	r2, [r0, #14]
 800684a:	6183      	str	r3, [r0, #24]
 800684c:	4619      	mov	r1, r3
 800684e:	2208      	movs	r2, #8
 8006850:	305c      	adds	r0, #92	; 0x5c
 8006852:	f7ff fdef 	bl	8006434 <memset>
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x38>)
 8006858:	6263      	str	r3, [r4, #36]	; 0x24
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <std+0x3c>)
 800685c:	62a3      	str	r3, [r4, #40]	; 0x28
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <std+0x40>)
 8006860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <std+0x44>)
 8006864:	6224      	str	r4, [r4, #32]
 8006866:	6323      	str	r3, [r4, #48]	; 0x30
 8006868:	bd10      	pop	{r4, pc}
 800686a:	bf00      	nop
 800686c:	08006cd1 	.word	0x08006cd1
 8006870:	08006cf3 	.word	0x08006cf3
 8006874:	08006d2b 	.word	0x08006d2b
 8006878:	08006d4f 	.word	0x08006d4f

0800687c <_cleanup_r>:
 800687c:	4901      	ldr	r1, [pc, #4]	; (8006884 <_cleanup_r+0x8>)
 800687e:	f000 b8af 	b.w	80069e0 <_fwalk_reent>
 8006882:	bf00      	nop
 8006884:	080067bd 	.word	0x080067bd

08006888 <__sfmoreglue>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	2268      	movs	r2, #104	; 0x68
 800688c:	1e4d      	subs	r5, r1, #1
 800688e:	4355      	muls	r5, r2
 8006890:	460e      	mov	r6, r1
 8006892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006896:	f000 f997 	bl	8006bc8 <_malloc_r>
 800689a:	4604      	mov	r4, r0
 800689c:	b140      	cbz	r0, 80068b0 <__sfmoreglue+0x28>
 800689e:	2100      	movs	r1, #0
 80068a0:	e9c0 1600 	strd	r1, r6, [r0]
 80068a4:	300c      	adds	r0, #12
 80068a6:	60a0      	str	r0, [r4, #8]
 80068a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068ac:	f7ff fdc2 	bl	8006434 <memset>
 80068b0:	4620      	mov	r0, r4
 80068b2:	bd70      	pop	{r4, r5, r6, pc}

080068b4 <__sfp_lock_acquire>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sfp_lock_acquire+0x8>)
 80068b6:	f000 b8b3 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20014500 	.word	0x20014500

080068c0 <__sfp_lock_release>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sfp_lock_release+0x8>)
 80068c2:	f000 b8ae 	b.w	8006a22 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20014500 	.word	0x20014500

080068cc <__sinit_lock_acquire>:
 80068cc:	4801      	ldr	r0, [pc, #4]	; (80068d4 <__sinit_lock_acquire+0x8>)
 80068ce:	f000 b8a7 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 80068d2:	bf00      	nop
 80068d4:	20014501 	.word	0x20014501

080068d8 <__sinit_lock_release>:
 80068d8:	4801      	ldr	r0, [pc, #4]	; (80068e0 <__sinit_lock_release+0x8>)
 80068da:	f000 b8a2 	b.w	8006a22 <__retarget_lock_release_recursive>
 80068de:	bf00      	nop
 80068e0:	20014501 	.word	0x20014501

080068e4 <__sinit>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	f7ff fff0 	bl	80068cc <__sinit_lock_acquire>
 80068ec:	69a3      	ldr	r3, [r4, #24]
 80068ee:	b11b      	cbz	r3, 80068f8 <__sinit+0x14>
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f4:	f7ff bff0 	b.w	80068d8 <__sinit_lock_release>
 80068f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068fc:	6523      	str	r3, [r4, #80]	; 0x50
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <__sinit+0x68>)
 8006900:	4a13      	ldr	r2, [pc, #76]	; (8006950 <__sinit+0x6c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	62a2      	str	r2, [r4, #40]	; 0x28
 8006906:	42a3      	cmp	r3, r4
 8006908:	bf04      	itt	eq
 800690a:	2301      	moveq	r3, #1
 800690c:	61a3      	streq	r3, [r4, #24]
 800690e:	4620      	mov	r0, r4
 8006910:	f000 f820 	bl	8006954 <__sfp>
 8006914:	6060      	str	r0, [r4, #4]
 8006916:	4620      	mov	r0, r4
 8006918:	f000 f81c 	bl	8006954 <__sfp>
 800691c:	60a0      	str	r0, [r4, #8]
 800691e:	4620      	mov	r0, r4
 8006920:	f000 f818 	bl	8006954 <__sfp>
 8006924:	2200      	movs	r2, #0
 8006926:	60e0      	str	r0, [r4, #12]
 8006928:	2104      	movs	r1, #4
 800692a:	6860      	ldr	r0, [r4, #4]
 800692c:	f7ff ff82 	bl	8006834 <std>
 8006930:	68a0      	ldr	r0, [r4, #8]
 8006932:	2201      	movs	r2, #1
 8006934:	2109      	movs	r1, #9
 8006936:	f7ff ff7d 	bl	8006834 <std>
 800693a:	68e0      	ldr	r0, [r4, #12]
 800693c:	2202      	movs	r2, #2
 800693e:	2112      	movs	r1, #18
 8006940:	f7ff ff78 	bl	8006834 <std>
 8006944:	2301      	movs	r3, #1
 8006946:	61a3      	str	r3, [r4, #24]
 8006948:	e7d2      	b.n	80068f0 <__sinit+0xc>
 800694a:	bf00      	nop
 800694c:	08006fa0 	.word	0x08006fa0
 8006950:	0800687d 	.word	0x0800687d

08006954 <__sfp>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	4607      	mov	r7, r0
 8006958:	f7ff ffac 	bl	80068b4 <__sfp_lock_acquire>
 800695c:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <__sfp+0x84>)
 800695e:	681e      	ldr	r6, [r3, #0]
 8006960:	69b3      	ldr	r3, [r6, #24]
 8006962:	b913      	cbnz	r3, 800696a <__sfp+0x16>
 8006964:	4630      	mov	r0, r6
 8006966:	f7ff ffbd 	bl	80068e4 <__sinit>
 800696a:	3648      	adds	r6, #72	; 0x48
 800696c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006970:	3b01      	subs	r3, #1
 8006972:	d503      	bpl.n	800697c <__sfp+0x28>
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	b30b      	cbz	r3, 80069bc <__sfp+0x68>
 8006978:	6836      	ldr	r6, [r6, #0]
 800697a:	e7f7      	b.n	800696c <__sfp+0x18>
 800697c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006980:	b9d5      	cbnz	r5, 80069b8 <__sfp+0x64>
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <__sfp+0x88>)
 8006984:	60e3      	str	r3, [r4, #12]
 8006986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800698a:	6665      	str	r5, [r4, #100]	; 0x64
 800698c:	f000 f847 	bl	8006a1e <__retarget_lock_init_recursive>
 8006990:	f7ff ff96 	bl	80068c0 <__sfp_lock_release>
 8006994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800699c:	6025      	str	r5, [r4, #0]
 800699e:	61a5      	str	r5, [r4, #24]
 80069a0:	2208      	movs	r2, #8
 80069a2:	4629      	mov	r1, r5
 80069a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a8:	f7ff fd44 	bl	8006434 <memset>
 80069ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069b4:	4620      	mov	r0, r4
 80069b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b8:	3468      	adds	r4, #104	; 0x68
 80069ba:	e7d9      	b.n	8006970 <__sfp+0x1c>
 80069bc:	2104      	movs	r1, #4
 80069be:	4638      	mov	r0, r7
 80069c0:	f7ff ff62 	bl	8006888 <__sfmoreglue>
 80069c4:	4604      	mov	r4, r0
 80069c6:	6030      	str	r0, [r6, #0]
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d1d5      	bne.n	8006978 <__sfp+0x24>
 80069cc:	f7ff ff78 	bl	80068c0 <__sfp_lock_release>
 80069d0:	230c      	movs	r3, #12
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	e7ee      	b.n	80069b4 <__sfp+0x60>
 80069d6:	bf00      	nop
 80069d8:	08006fa0 	.word	0x08006fa0
 80069dc:	ffff0001 	.word	0xffff0001

080069e0 <_fwalk_reent>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	4606      	mov	r6, r0
 80069e6:	4688      	mov	r8, r1
 80069e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069ec:	2700      	movs	r7, #0
 80069ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f2:	f1b9 0901 	subs.w	r9, r9, #1
 80069f6:	d505      	bpl.n	8006a04 <_fwalk_reent+0x24>
 80069f8:	6824      	ldr	r4, [r4, #0]
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d1f7      	bne.n	80069ee <_fwalk_reent+0xe>
 80069fe:	4638      	mov	r0, r7
 8006a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a04:	89ab      	ldrh	r3, [r5, #12]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d907      	bls.n	8006a1a <_fwalk_reent+0x3a>
 8006a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	d003      	beq.n	8006a1a <_fwalk_reent+0x3a>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	47c0      	blx	r8
 8006a18:	4307      	orrs	r7, r0
 8006a1a:	3568      	adds	r5, #104	; 0x68
 8006a1c:	e7e9      	b.n	80069f2 <_fwalk_reent+0x12>

08006a1e <__retarget_lock_init_recursive>:
 8006a1e:	4770      	bx	lr

08006a20 <__retarget_lock_acquire_recursive>:
 8006a20:	4770      	bx	lr

08006a22 <__retarget_lock_release_recursive>:
 8006a22:	4770      	bx	lr

08006a24 <__swhatbuf_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	460e      	mov	r6, r1
 8006a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	b096      	sub	sp, #88	; 0x58
 8006a30:	4614      	mov	r4, r2
 8006a32:	461d      	mov	r5, r3
 8006a34:	da08      	bge.n	8006a48 <__swhatbuf_r+0x24>
 8006a36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	061a      	lsls	r2, r3, #24
 8006a40:	d410      	bmi.n	8006a64 <__swhatbuf_r+0x40>
 8006a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a46:	e00e      	b.n	8006a66 <__swhatbuf_r+0x42>
 8006a48:	466a      	mov	r2, sp
 8006a4a:	f000 f995 	bl	8006d78 <_fstat_r>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	dbf1      	blt.n	8006a36 <__swhatbuf_r+0x12>
 8006a52:	9a01      	ldr	r2, [sp, #4]
 8006a54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a5c:	425a      	negs	r2, r3
 8006a5e:	415a      	adcs	r2, r3
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	e7ee      	b.n	8006a42 <__swhatbuf_r+0x1e>
 8006a64:	2340      	movs	r3, #64	; 0x40
 8006a66:	2000      	movs	r0, #0
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	b016      	add	sp, #88	; 0x58
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a70 <__smakebuf_r>:
 8006a70:	898b      	ldrh	r3, [r1, #12]
 8006a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a74:	079d      	lsls	r5, r3, #30
 8006a76:	4606      	mov	r6, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	d507      	bpl.n	8006a8c <__smakebuf_r+0x1c>
 8006a7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	2301      	movs	r3, #1
 8006a86:	6163      	str	r3, [r4, #20]
 8006a88:	b002      	add	sp, #8
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	ab01      	add	r3, sp, #4
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f7ff ffc8 	bl	8006a24 <__swhatbuf_r>
 8006a94:	9900      	ldr	r1, [sp, #0]
 8006a96:	4605      	mov	r5, r0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 f895 	bl	8006bc8 <_malloc_r>
 8006a9e:	b948      	cbnz	r0, 8006ab4 <__smakebuf_r+0x44>
 8006aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa4:	059a      	lsls	r2, r3, #22
 8006aa6:	d4ef      	bmi.n	8006a88 <__smakebuf_r+0x18>
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
 8006aac:	f043 0302 	orr.w	r3, r3, #2
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	e7e3      	b.n	8006a7c <__smakebuf_r+0xc>
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <__smakebuf_r+0x7c>)
 8006ab6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	6020      	str	r0, [r4, #0]
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	9b00      	ldr	r3, [sp, #0]
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	6120      	str	r0, [r4, #16]
 8006aca:	b15b      	cbz	r3, 8006ae4 <__smakebuf_r+0x74>
 8006acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 f963 	bl	8006d9c <_isatty_r>
 8006ad6:	b128      	cbz	r0, 8006ae4 <__smakebuf_r+0x74>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	89a0      	ldrh	r0, [r4, #12]
 8006ae6:	4305      	orrs	r5, r0
 8006ae8:	81a5      	strh	r5, [r4, #12]
 8006aea:	e7cd      	b.n	8006a88 <__smakebuf_r+0x18>
 8006aec:	0800687d 	.word	0x0800687d

08006af0 <_free_r>:
 8006af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af2:	2900      	cmp	r1, #0
 8006af4:	d044      	beq.n	8006b80 <_free_r+0x90>
 8006af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afa:	9001      	str	r0, [sp, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f1a1 0404 	sub.w	r4, r1, #4
 8006b02:	bfb8      	it	lt
 8006b04:	18e4      	addlt	r4, r4, r3
 8006b06:	f000 f96b 	bl	8006de0 <__malloc_lock>
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <_free_r+0x94>)
 8006b0c:	9801      	ldr	r0, [sp, #4]
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	b933      	cbnz	r3, 8006b20 <_free_r+0x30>
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	6014      	str	r4, [r2, #0]
 8006b16:	b003      	add	sp, #12
 8006b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b1c:	f000 b966 	b.w	8006dec <__malloc_unlock>
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d908      	bls.n	8006b36 <_free_r+0x46>
 8006b24:	6825      	ldr	r5, [r4, #0]
 8006b26:	1961      	adds	r1, r4, r5
 8006b28:	428b      	cmp	r3, r1
 8006b2a:	bf01      	itttt	eq
 8006b2c:	6819      	ldreq	r1, [r3, #0]
 8006b2e:	685b      	ldreq	r3, [r3, #4]
 8006b30:	1949      	addeq	r1, r1, r5
 8006b32:	6021      	streq	r1, [r4, #0]
 8006b34:	e7ed      	b.n	8006b12 <_free_r+0x22>
 8006b36:	461a      	mov	r2, r3
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b10b      	cbz	r3, 8006b40 <_free_r+0x50>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d9fa      	bls.n	8006b36 <_free_r+0x46>
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	1855      	adds	r5, r2, r1
 8006b44:	42a5      	cmp	r5, r4
 8006b46:	d10b      	bne.n	8006b60 <_free_r+0x70>
 8006b48:	6824      	ldr	r4, [r4, #0]
 8006b4a:	4421      	add	r1, r4
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	d1e0      	bne.n	8006b16 <_free_r+0x26>
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	6053      	str	r3, [r2, #4]
 8006b5a:	4421      	add	r1, r4
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	e7da      	b.n	8006b16 <_free_r+0x26>
 8006b60:	d902      	bls.n	8006b68 <_free_r+0x78>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	e7d6      	b.n	8006b16 <_free_r+0x26>
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	1961      	adds	r1, r4, r5
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf04      	itt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	bf04      	itt	eq
 8006b78:	1949      	addeq	r1, r1, r5
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6054      	str	r4, [r2, #4]
 8006b7e:	e7ca      	b.n	8006b16 <_free_r+0x26>
 8006b80:	b003      	add	sp, #12
 8006b82:	bd30      	pop	{r4, r5, pc}
 8006b84:	20014504 	.word	0x20014504

08006b88 <sbrk_aligned>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4e0e      	ldr	r6, [pc, #56]	; (8006bc4 <sbrk_aligned+0x3c>)
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	6831      	ldr	r1, [r6, #0]
 8006b90:	4605      	mov	r5, r0
 8006b92:	b911      	cbnz	r1, 8006b9a <sbrk_aligned+0x12>
 8006b94:	f000 f88c 	bl	8006cb0 <_sbrk_r>
 8006b98:	6030      	str	r0, [r6, #0]
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f000 f887 	bl	8006cb0 <_sbrk_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d00a      	beq.n	8006bbc <sbrk_aligned+0x34>
 8006ba6:	1cc4      	adds	r4, r0, #3
 8006ba8:	f024 0403 	bic.w	r4, r4, #3
 8006bac:	42a0      	cmp	r0, r4
 8006bae:	d007      	beq.n	8006bc0 <sbrk_aligned+0x38>
 8006bb0:	1a21      	subs	r1, r4, r0
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 f87c 	bl	8006cb0 <_sbrk_r>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d101      	bne.n	8006bc0 <sbrk_aligned+0x38>
 8006bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	20014508 	.word	0x20014508

08006bc8 <_malloc_r>:
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	1ccd      	adds	r5, r1, #3
 8006bce:	f025 0503 	bic.w	r5, r5, #3
 8006bd2:	3508      	adds	r5, #8
 8006bd4:	2d0c      	cmp	r5, #12
 8006bd6:	bf38      	it	cc
 8006bd8:	250c      	movcc	r5, #12
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	4607      	mov	r7, r0
 8006bde:	db01      	blt.n	8006be4 <_malloc_r+0x1c>
 8006be0:	42a9      	cmp	r1, r5
 8006be2:	d905      	bls.n	8006bf0 <_malloc_r+0x28>
 8006be4:	230c      	movs	r3, #12
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	2600      	movs	r6, #0
 8006bea:	4630      	mov	r0, r6
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	4e2e      	ldr	r6, [pc, #184]	; (8006cac <_malloc_r+0xe4>)
 8006bf2:	f000 f8f5 	bl	8006de0 <__malloc_lock>
 8006bf6:	6833      	ldr	r3, [r6, #0]
 8006bf8:	461c      	mov	r4, r3
 8006bfa:	bb34      	cbnz	r4, 8006c4a <_malloc_r+0x82>
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f7ff ffc2 	bl	8006b88 <sbrk_aligned>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	4604      	mov	r4, r0
 8006c08:	d14d      	bne.n	8006ca6 <_malloc_r+0xde>
 8006c0a:	6834      	ldr	r4, [r6, #0]
 8006c0c:	4626      	mov	r6, r4
 8006c0e:	2e00      	cmp	r6, #0
 8006c10:	d140      	bne.n	8006c94 <_malloc_r+0xcc>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	4631      	mov	r1, r6
 8006c16:	4638      	mov	r0, r7
 8006c18:	eb04 0803 	add.w	r8, r4, r3
 8006c1c:	f000 f848 	bl	8006cb0 <_sbrk_r>
 8006c20:	4580      	cmp	r8, r0
 8006c22:	d13a      	bne.n	8006c9a <_malloc_r+0xd2>
 8006c24:	6821      	ldr	r1, [r4, #0]
 8006c26:	3503      	adds	r5, #3
 8006c28:	1a6d      	subs	r5, r5, r1
 8006c2a:	f025 0503 	bic.w	r5, r5, #3
 8006c2e:	3508      	adds	r5, #8
 8006c30:	2d0c      	cmp	r5, #12
 8006c32:	bf38      	it	cc
 8006c34:	250c      	movcc	r5, #12
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ffa5 	bl	8006b88 <sbrk_aligned>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d02b      	beq.n	8006c9a <_malloc_r+0xd2>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	442b      	add	r3, r5
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	e00e      	b.n	8006c68 <_malloc_r+0xa0>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	1b52      	subs	r2, r2, r5
 8006c4e:	d41e      	bmi.n	8006c8e <_malloc_r+0xc6>
 8006c50:	2a0b      	cmp	r2, #11
 8006c52:	d916      	bls.n	8006c82 <_malloc_r+0xba>
 8006c54:	1961      	adds	r1, r4, r5
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	6025      	str	r5, [r4, #0]
 8006c5a:	bf18      	it	ne
 8006c5c:	6059      	strne	r1, [r3, #4]
 8006c5e:	6863      	ldr	r3, [r4, #4]
 8006c60:	bf08      	it	eq
 8006c62:	6031      	streq	r1, [r6, #0]
 8006c64:	5162      	str	r2, [r4, r5]
 8006c66:	604b      	str	r3, [r1, #4]
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f104 060b 	add.w	r6, r4, #11
 8006c6e:	f000 f8bd 	bl	8006dec <__malloc_unlock>
 8006c72:	f026 0607 	bic.w	r6, r6, #7
 8006c76:	1d23      	adds	r3, r4, #4
 8006c78:	1af2      	subs	r2, r6, r3
 8006c7a:	d0b6      	beq.n	8006bea <_malloc_r+0x22>
 8006c7c:	1b9b      	subs	r3, r3, r6
 8006c7e:	50a3      	str	r3, [r4, r2]
 8006c80:	e7b3      	b.n	8006bea <_malloc_r+0x22>
 8006c82:	6862      	ldr	r2, [r4, #4]
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	bf0c      	ite	eq
 8006c88:	6032      	streq	r2, [r6, #0]
 8006c8a:	605a      	strne	r2, [r3, #4]
 8006c8c:	e7ec      	b.n	8006c68 <_malloc_r+0xa0>
 8006c8e:	4623      	mov	r3, r4
 8006c90:	6864      	ldr	r4, [r4, #4]
 8006c92:	e7b2      	b.n	8006bfa <_malloc_r+0x32>
 8006c94:	4634      	mov	r4, r6
 8006c96:	6876      	ldr	r6, [r6, #4]
 8006c98:	e7b9      	b.n	8006c0e <_malloc_r+0x46>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f000 f8a4 	bl	8006dec <__malloc_unlock>
 8006ca4:	e7a1      	b.n	8006bea <_malloc_r+0x22>
 8006ca6:	6025      	str	r5, [r4, #0]
 8006ca8:	e7de      	b.n	8006c68 <_malloc_r+0xa0>
 8006caa:	bf00      	nop
 8006cac:	20014504 	.word	0x20014504

08006cb0 <_sbrk_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_sbrk_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f000 f8ae 	bl	8006e1c <_sbrk>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_sbrk_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_sbrk_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	2001450c 	.word	0x2001450c

08006cd0 <__sread>:
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd8:	f000 f88e 	bl	8006df8 <_read_r>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	bfab      	itete	ge
 8006ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce4:	181b      	addge	r3, r3, r0
 8006ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cea:	bfac      	ite	ge
 8006cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cee:	81a3      	strhlt	r3, [r4, #12]
 8006cf0:	bd10      	pop	{r4, pc}

08006cf2 <__swrite>:
 8006cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf6:	461f      	mov	r7, r3
 8006cf8:	898b      	ldrh	r3, [r1, #12]
 8006cfa:	05db      	lsls	r3, r3, #23
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	4616      	mov	r6, r2
 8006d02:	d505      	bpl.n	8006d10 <__swrite+0x1e>
 8006d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d08:	2302      	movs	r3, #2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f000 f856 	bl	8006dbc <_lseek_r>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	4628      	mov	r0, r5
 8006d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d26:	f7ff bb31 	b.w	800638c <_write_r>

08006d2a <__sseek>:
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d32:	f000 f843 	bl	8006dbc <_lseek_r>
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	bf15      	itete	ne
 8006d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d46:	81a3      	strheq	r3, [r4, #12]
 8006d48:	bf18      	it	ne
 8006d4a:	81a3      	strhne	r3, [r4, #12]
 8006d4c:	bd10      	pop	{r4, pc}

08006d4e <__sclose>:
 8006d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d52:	f000 b801 	b.w	8006d58 <_close_r>
	...

08006d58 <_close_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	; (8006d74 <_close_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7f9 ff29 	bl	8000bba <_close>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_close_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_close_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	2001450c 	.word	0x2001450c

08006d78 <_fstat_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	; (8006d98 <_fstat_r+0x20>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	602b      	str	r3, [r5, #0]
 8006d86:	f7f9 ff24 	bl	8000bd2 <_fstat>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	d102      	bne.n	8006d94 <_fstat_r+0x1c>
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	b103      	cbz	r3, 8006d94 <_fstat_r+0x1c>
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	bd38      	pop	{r3, r4, r5, pc}
 8006d96:	bf00      	nop
 8006d98:	2001450c 	.word	0x2001450c

08006d9c <_isatty_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d06      	ldr	r5, [pc, #24]	; (8006db8 <_isatty_r+0x1c>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	602b      	str	r3, [r5, #0]
 8006da8:	f7f9 ff23 	bl	8000bf2 <_isatty>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_isatty_r+0x1a>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_isatty_r+0x1a>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	2001450c 	.word	0x2001450c

08006dbc <_lseek_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d07      	ldr	r5, [pc, #28]	; (8006ddc <_lseek_r+0x20>)
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7f9 ff1c 	bl	8000c08 <_lseek>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_lseek_r+0x1e>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_lseek_r+0x1e>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	2001450c 	.word	0x2001450c

08006de0 <__malloc_lock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__malloc_lock+0x8>)
 8006de2:	f7ff be1d 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	200144ff 	.word	0x200144ff

08006dec <__malloc_unlock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_unlock+0x8>)
 8006dee:	f7ff be18 	b.w	8006a22 <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	200144ff 	.word	0x200144ff

08006df8 <_read_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_read_r+0x20>)
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	602a      	str	r2, [r5, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f7f9 feba 	bl	8000b80 <_read>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_read_r+0x1e>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_read_r+0x1e>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	2001450c 	.word	0x2001450c

08006e1c <_sbrk>:
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <_sbrk+0x14>)
 8006e1e:	6811      	ldr	r1, [r2, #0]
 8006e20:	4603      	mov	r3, r0
 8006e22:	b909      	cbnz	r1, 8006e28 <_sbrk+0xc>
 8006e24:	4903      	ldr	r1, [pc, #12]	; (8006e34 <_sbrk+0x18>)
 8006e26:	6011      	str	r1, [r2, #0]
 8006e28:	6810      	ldr	r0, [r2, #0]
 8006e2a:	4403      	add	r3, r0
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	4770      	bx	lr
 8006e30:	20014510 	.word	0x20014510
 8006e34:	20014518 	.word	0x20014518

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
